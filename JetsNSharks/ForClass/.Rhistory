summary(m)
m <- glm(fly ~ 0 + v2, data = tmp, family = 'binomial')
summary(m)
predict(m, tmp)
m <- glm(fly ~ 0 + v1 + v2, data = tmp, family = 'binomial')
summary(m)
predict(m, tmp)
m <- glm(v1 ~ 0 + fly + animal, data = tmp, family = 'binomial')
summary(m)
predict(m, tmp)
tmp
round(predict(m, tmp),2)
m <- glm(v2 ~ 0 + fly + animal, data = tmp, family = 'binomial')
round(predict(m, tmp),2)
round(predict(m, tmp),3)
summary(m)
m <- glm(v2 ~ 0 + fly + animal, data = tmp, family = 'binomial')
summary(m)
round(predict(m, tmp),3)
m <- glm(v2 ~ fly + animal, data = tmp, family = 'binomial')
summary(m)
round(predict(m, tmp),3)
summary(m)
m <- glm(v2 ~ 0 + fly + animal, data = tmp, family = 'binomial')
summary(m)
m <- glm(v2 ~ 0 + fly + animal, data = tmp, family = 'binomial')
tmp
m <- glm(v3 ~ 0 + fly + animal, data = tmp, family = 'binomial')
round(predict(m, tmp),3)
tmp$v3 <- c(0,0,0,1)
m <- glm(v3 ~ 0 + fly + animal, data = tmp, family = 'binomial')
round(predict(m, tmp),3)
tmp
tmp[tmp==0] <- -1
m <- glm(v3 ~ 0 + fly + animal, data = tmp, family = 'binomial')
m <- lm(v3 ~ 0 + fly + animal, data = tmp)
round(predict(m, tmp),3)
summary(m)
tmp
round(predict(m, tmp),3)
m <- lm(v2 ~ 0 + fly + animal, data = tmp)
round(predict(m, tmp),3)
m <- lm(v1 ~ 0 + fly + animal, data = tmp)
round(predict(m, tmp),3)
m <- lm(fly ~ 0 + v1 + v2, data = tmp)
round(predict(m, tmp),3)
m <- lm(fly ~ 0 + v2, data = tmp)
round(predict(m, tmp),3)
summary(m)
m <- lm(fly ~ 0 + v1 + v2, data = tmp)
summary(m)
m <- lm(fly ~ 0 + v1 + v3, data = tmp)
summary(m)
round(predict(m, tmp),3)
tmp[tmp==-1] <- 0
m <- glm(fly ~ 0 + v1 + v2, data = tmp, family = 'binomial')
round(predict(m, tmp),3)
sig
sig <- function(n){1/(exp(-1 * n))}
sig(predict(m, tmp),3)
sig(predict(m, tmp))
sig
sig<-function(n){1/(1 + exp(-1 * n))}
sig(predict(m, tmp))
round(sig(predict(m, tmp),2)
)
round(sig(predict(m, tmp)),2)
m <- glm(fly ~ 0 + v2, data = tmp, family = 'binomial')
round(sig(predict(m, tmp)),2)
m <- glm(v2 ~ 0 + fly + animal, data = tmp, family = 'binomial')
round(sig(predict(m, tmp)),2)
m <- glm(v2 ~ fly + animal, data = tmp, family = 'binomial')
round(sig(predict(m, tmp)),2)
m <- glm(v2 ~ 0 + fly + animal, data = tmp, family = 'binomial')
round(sig(predict(m, tmp)),2)
m <- glm(v1 ~ 0 + fly + animal, data = tmp, family = 'binomial')
round(sig(predict(m, tmp)),2)
m <- glm(animal ~ 0 + v1 + v2, data = tmp, family = 'binomial')
round(sig(predict(m, tmp)),2)
summary(m)
tmp
tmp1 <- tmp
for(i in c(2:20)) tmp1 <- rbind(tmp, tmp1)
head(tmp1)
dim(tmp1)
tmp1 <- tmp1 + matrix(runif(80 * 5)/100, 80, 5)
m <- glm(animal ~ 0 + v1 + v2, data = tmp1, family = 'binomial')
tmp1[tmp1<0] <- 0
tmp1[tmp1>1] <- 1
m <- glm(animal ~ 0 + v1 + v2, data = tmp1, family = 'binomial')
summary(m)
predict(m, tmp)
mean(as.numeric(predict(m, tmp1)>0)==tmp1$animal)
sig(predict(m, tmp1)>0))
round(sig(predict(m, tmp1)>0),2)
round(sig(predict(m, tmp1)>0),2) > .5
as.numeric(round(sig(predict(m, tmp1)>0),2) > .5)
as.numeric(round(sig(predict(m, tmp1)>0),2) > .5)==tmp1$animal
mean(as.numeric(round(sig(predict(m, tmp1)>0),2) > .5)==tmp1$animal)
tmp1[1:5,]
tmp1 <- tmp
tmp1[tmp1==0] <- -1
for(i in c(2:20)) tmp1 <- rbind(tmp1, tmp)
head(tmp1)
tmp1 <- tmp
for(i in c(2:20)) tmp1 <- rbind(tmp1, tmp)
tmp1[tmp1==0] <- -1
tmp1 <- tmp1 + matrix((runif(80 * 5)-.5)/100, 80, 5)
head(tmp1)
m <- lm(v1 ~ 0 + fly + animal, data = tmp1)
summary(m)
m <- lm(v2 ~ 0 + fly + animal, data = tmp1)
summary(m)
m <- lm(fly ~ 0 + v1 + v2, data = tmp1)
summary(m)
m0 <- lm(fly ~ 0 + v2, data = tmp1)
summary(m0)
anova(m0, m)
m0 <- lm(fly ~ v2, data = tmp1)
m <- lm(fly ~ v1 + v2, data = tmp1)
summary(m)
summary(m0)
anova(m0, m)
m <- lm(v2 ~ 0 + fly + animal, data = tmp1)
summary(m0)
m <- lm(v1 ~ 0 + fly + animal, data = tmp1)
summary(m)
plot(tmp1)
plot(tmp1[,1:2])
plot(tmp1[,1:2], pch = 16, col = c(1:80)%4 + 1)
plot(tmp1[,1:2], pch = 16, col = c(1:80)%%4 + 1)
plot(tmp1[,1:2], pch = 16, col = c("red","orange","blue","green")[c(1:80)%%4 + 1])
head(tmp1)
tmp
plot(tmp1[,1:2], pch = 16, col = c("red","orange","blue","green")[c(0:79)%%4 + 1])
m <- lm(v2 ~ 0 + fly + animal, data = tmp1)
summary(m)
m <- lm(v1 ~ 0 + fly + animal, data = tmp1)
summary(m)
m <- lm(v1 ~ fly + animal, data = tmp1)
summary(m)
tmp <- tmp[,1:4]
tmp1 <- tmp1[,1:4]
head(tmp1)
m <- lm(fly ~ v1 + v2, data = tmp1)
summary(m)
m <- lm(animal ~ v1 + v2, data = tmp1)
summary(m)
tmp
m <- lm(v1 ~ fly + animal, data = tmp1)
summary(m)
tmp[tmp==0] <- -1
m <- lm(v1 ~ fly + animal, data = tmp1)
summary(m)
m <- lm(v1 ~ fly + animal, data = tmp)
summary(m)
summary(m)$r-squared
summary(m)$r.squared
round(summary(m)$r.squared,3)
round(summary(m)$coefficients, 3)
m <- lm(v1 ~ fly + animal, data = tmp)
round(summary(m)$coefficients, 3)
round(summary(m)$r.squared,3)
m <- lm(v1 ~ fly + animal + v2, data = tmp)
round(summary(m)$coefficients, 3)
round(summary(m)$r.squared,3)
m <- lm(v1 ~ fly + animal, data = tmp)
round(summary(m)$r.squared,3)
round(summary(m)$coefficients, 3)
m <- lm(fly ~ v1 + v2, data = tmp)
summary(m)
m <- lm(v1 ~ fly + animal, data = tmp1)
summary(m)$coefficients
summary(m)$r-squared
summary(m)$r.squared
m <- lm(animal ~ v1 + v2, data = tmp1)
summary(m)$coefficients
summary(m)$r.squared
tmp
m <- lm(v1 ~ fly + animal, data = tmp)
summary(m)
round(summary(m)$coefficients, 3)
m <- lm(v1 ~ fly + animal + v2, data = tmp)
round(summary(m)$coefficients, 3)
q()
rm(list=ls())
shiny::runApp('C:/Github/CONNECT/RoomSchema/RSApp/tester')
runApp('C:/Github/CONNECT/RoomSchema/RSApp/tester')
runApp('C:/Github/CONNECT/RoomSchema/RSApp/tester')
runApp('C:/Github/CONNECT/RoomSchema/RSApp/tester')
runApp('C:/Github/CONNECT/RoomSchema/RSApp/tester')
runApp('C:/Github/CONNECT/RoomSchema/RSApp/tester')
runApp('C:/Github/CONNECT/RoomSchema/RSApp/tester')
runApp('C:/Github/CONNECT/RoomSchema/RSApp/tester')
runApp('C:/Github/CONNECT/RoomSchema/RSApp/tester')
runApp('C:/Github/CONNECT/RoomSchema/RSApp/tester')
runApp('C:/Github/CONNECT/RoomSchema/RSApp/tester')
runApp('C:/Github/CONNECT/RoomSchema/RSApp/tester')
runApp('C:/Github/CONNECT/RoomSchema/RSApp/tester')
runApp('C:/Github/CONNECT/RoomSchema/RSApp/tester')
runApp('C:/Github/CONNECT/RoomSchema/RSApp/tester')
runApp('C:/Github/CONNECT/RoomSchema/RSApp/tester')
runApp('C:/Github/CONNECT/RoomSchema/RSApp/tester')
shiny::runApp('C:/Github/CONNECT/JetsNSharks/JSModelApp')
shiny::runApp('C:/Github/CONNECT/RoomSchema/RSApp/RoomSchema')
runApp('C:/Github/CONNECT/RoomSchema/RSApp/RoomSchema')
runApp('C:/Github/CONNECT/RoomSchema/RSApp/RoomSchema')
runApp('C:/Github/CONNECT/RoomSchema/RSApp/RoomSchema')
runApp('C:/Github/CONNECT/RoomSchema/RSApp/RoomSchema')
runApp('C:/Github/CONNECT/RoomSchema/RSApp/RoomSchema')
runApp('C:/Github/CONNECT/RoomSchema/RSApp/RoomSchema')
runApp('C:/Github/CONNECT/RoomSchema/RSApp/RoomSchema')
runApp('C:/Github/CONNECT/RoomSchema/RSApp/RoomSchema')
x <- c(-20:20)/10
x
sig <- function(x){}
sig <- function(x){
1/(1 + exp(-1 * x))}
sig(x)
plot(x, sig(x), xlab = "Net input", ylab = "Unit activation", main = "Sigmoid activation function
")
plot(x, sig(x), xlab = "Net input", ylab = "Unit activation", main = "Sigmoid activation function", type = "l")
x <- c(-30:30)/10
plot(x, sig(x), xlab = "Net input", ylab = "Unit activation", main = "Sigmoid activation function", type = "l")
x <- c(-50:50)/10
plot(x, sig(x), xlab = "Net input", ylab = "Unit activation", main = "Sigmoid activation function", type = "l", ylim = c(0,1))
abline(v = 0, lty = 2)
abline(h = .5, lty = 2)
par(oma = c(2,2,2,2))
plot(x, sig(x), xlab = "Net input", ylab = "Unit activation", main = "Sigmoid activation function", type = "l", ylim = c(0,1))
abline(v = 0, lty = 2)
abline(h = .5, lty = 2)
sig(-1.7)
abline(v = -1.7)
setwd("C:/Github/CONNECT/JetsNSharks/ForClass")
dtab <- read.csv("JS_data_table.csv")
head(dtab)
unames <- c()
ncols <- dim(dtab)[2] #Number of columns in the data table
for(i in c(1:ncols)) unames <- c(unames, unique(dtab[,i]))
unames
unames <- gsub(" ", "", unames)
unames
unames <- c()
ncols <- dim(dtab)[2] #Number of columns in the data table
#Concatenate unique values from each column:
for(i in c(1:ncols)) unames <- c(unames, unique(dtab[,i]))
unames <- gsub(" ","",unames) #Remove any spaces
unames
unames <- c(tolower(dtab[,1]), unames)
unames
unames <- c(tolower(dtab[,1]), unames) #Add lower-case name variants
unames <- gsub(" ","", unames) #Remove spaces
unames
length(unames)
invec <- rep(0, times = 95)
names(invec)<-unames
invec["Ike"]
curract <- rep(0, times = length(unames))
names(curract) <- unames
curract["Ike"]
curract[c("Pusher", "20s")] <- 1
barplot(curract)
names(curract==1)
names(curract)[curract==1]
curract[c("Pusher", "20s")] <- 1
barplot(curract, las=2)
curract[c("Pusher", "20s")] <- 1
barplot(curract, las=2)
curract[c("Pusher", "20s")] <- 1
barplot(curract, las=2, cex = .5)
help(barplot)
curract[c("Pusher", "20s")] <- 1
barplot(curract, las=2, cex.names = .5)
w <- read.csv("JS_wts.csv", header = T, row.names = 1)
w <- as.matrix(w)
w[1:5,1:5]
image(w)
image(w,xaxt = "n", yaxt = "n")
image(w,xaxt = "n", yaxt = "n")
mtext(side = 2, row.names(w), adj = 1, cex = .5)
image(w,xaxt = "n", yaxt = "n")
mtext(side = 2, at = c(0:94/94), row.names(w), adj = 1, cex = .5)
image(w,xaxt = "n", yaxt = "n")
mtext(side = 2, at = c(0:94/94), row.names(w), adj = 1, cex = .5, las = 2)
fig.height(8)
image(w,xaxt = "n", yaxt = "n")
mtext(side = 2, at = c(0:94/94), row.names(w), adj = 1, cex = .5, las = 2)
image(w,xaxt = "n", yaxt = "n")
mtext(side = 2, at = c(0:94/94), row.names(w), adj = 1, cex = .5, las = 2)
image(w,xaxt = "n", yaxt = "n")
mtext(side = 2, at = c(0:94/94), row.names(w), adj = 1, cex = 1, las = 2)
image(w,xaxt = "n", yaxt = "n", col = c("blue","gray","red"))
mtext(side = 2, at = c(0:94/94), row.names(w), adj = 1, cex = 1, las = 2)
image(w,xaxt = "n", yaxt = "n", col = c("blue","gray","red"))
mtext(side = 2, at = c(0:94/94), row.names(w), adj = 1, cex = 1, las = 2)
image(w,xaxt = "n", yaxt = "n", col = c("blue","gray","red"))
mtext(side = 2, at = c(0:94/94), row.names(w), adj = 1, cex = 1, las = 2)
image(w,xaxt = "n", yaxt = "n", col = c("blue","gray","red"))
mtext(side = 2, at = c(0:94/94), row.names(w), adj = 1, cex = 5, las = 2)
image(w,xaxt = "n", yaxt = "n", col = c("blue","gray","red"))
mtext(side = 2, at = c(0:94/94), row.names(w), adj = 1, cex = 2, las = 2)
image(w[95:1,],xaxt = "n", yaxt = "n", col = c("blue","gray","red"))
dim(w)
dim(dtab)
unames <- c()
ncols <- dim(dtab)[2] #Number of columns in the data table
#Concatenate unique values from each column:
for(i in c(1:ncols)) unames <- c(unames, unique(dtab[,i]))
unames <- gsub(" ","",unames) #Remove any spaces
unames
length(unames)
41+27
dim(dtab)
tolower(dtab[,1])
unames <- c(tolower(dtab[,1]), unames)
length(unames)
unames <- c(tolower(dtab[,1]), unames) #Add lower-case name variants
unames <- gsub(" ","", unames) #Remove spaces
unames
unames <- c()
ncols <- dim(dtab)[2] #Number of columns in the data table
#Concatenate unique values from each column:
for(i in c(1:ncols)) unames <- c(unames, unique(dtab[,i]))
unames <- gsub(" ","",unames) #Remove any spaces
unames
tmp <- tolower(dtab[,1])
tmp <- gsub(" ","", tmp)
#unames <- c(tolower(dtab[,1]), unames) #Add lower-case name variants
#unames <- gsub(" ","", unames) #Remove spaces
#unames
tmp
tmp <- tolower(dtab[,1])
tmp <- gsub(" ","", tmp)
unames <- c(tmp, unames)
#unames <- c(tolower(dtab[,1]), unames) #Add lower-case name variants
#unames <- gsub(" ","", unames) #Remove spaces
unames
unames <- c()
ncols <- dim(dtab)[2] #Number of columns in the data table
#Concatenate unique values from each column:
for(i in c(1:ncols)) unames <- c(unames, unique(dtab[,i]))
unames <- gsub(" ","",unames) #Remove any spaces
unames
tmp <- tolower(dtab[,1])
tmp <- gsub(" ","", tmp)
unames <- c(tmp, unames)
rm(tmp)
unames
curract <- rep(0, times = length(unames))
names(curract) <- unames
curract["Ike"]
curract <- rep(0, times = length(unames))
names(curract) <- unames
curract["Ike"]
curract[c("Pusher", "20s")] <- 1
barplot(curract, las=2, cex.names = .5)
w <- read.csv("JS_wts.csv", header = T, row.names = 1)
w <- as.matrix(w)
w[1:5,1:5]
w <- read.csv("JS_wts.csv", header = T, row.names = 1)
w <- as.matrix(w)
w[1:5,1:5]
image(w[95:1,],xaxt = "n", yaxt = "n", col = c("blue","gray","red"))
image(w[68:1,],xaxt = "n", yaxt = "n", col = c("blue","gray","red"))
mtext(side = 2, at = c(0:67/67), row.names(w), adj = 1, cex = 2, las = 2)
image(w[,68:1],xaxt = "n", yaxt = "n", col = c("blue","gray","red"))
mtext(side = 2, at = c(0:67/67), row.names(w), adj = 1, cex = 2, las = 2)
image(w[,68:1],xaxt = "n", yaxt = "n", col = c("blue","gray","red"))
mtext(side = 2, at = c(67:0/67), row.names(w), adj = 1, cex = 2, las = 2)
image(w[,68:1],xaxt = "n", yaxt = "n", col = c("blue","gray","red"))
mtext(side = 2, at = c(67:0/67), row.names(w), adj = 1, cex = 2, las = 2)
mtext(side = 3, at = c(0:67)), colnames(w), cex = 1, las = 2)
image(w[,68:1],xaxt = "n", yaxt = "n", col = c("blue","gray","red"))
mtext(side = 2, at = c(67:0/67), row.names(w), adj = 1, cex = 2, las = 2)
mtext(side = 3, at = c(0:67), colnames(w), cex = 1, las = 2)
par(oma = c(2,2,2,2))
image(w[,68:1],xaxt = "n", yaxt = "n", col = c("blue","gray","red"))
mtext(side = 2, at = c(67:0/67), row.names(w), adj = 1, cex = 2, las = 2)
mtext(side = 3, at = c(0:67), colnames(w), cex = 1, las = 2)
par(oma = c(2,2,2,2))
image(w[,68:1],xaxt = "n", yaxt = "n", col = c("blue","gray","red"))
mtext(side = 2, at = c(67:0/67), row.names(w), adj = 1, cex = 2, las = 2)
mtext(side = 3, at = c(0:67)/67, colnames(w), cex = 1, las = 2)
par(oma = c(2,2,2,2))
image(w[,68:1],xaxt = "n", yaxt = "n", col = c("blue","gray","red"))
mtext(side = 2, at = c(67:0/67), row.names(w), adj = 1, cex = 2, las = 2)
mtext(side = 3, at = c(0:67)/67, colnames(w), cex = 2, las = 2)
par(oma = c(2,2,2,2))
image(w[,68:1],xaxt = "n", yaxt = "n", col = c("blue","gray","red"))
mtext(side = 2, at = c(67:0/67), row.names(w), adj = 1, cex = 2, las = 2)
mtext(side = 3, at = c(0:67)/67, colnames(w), cex = 2, adj = 0, las = 2)
length(curract)
curract * w[,1]
w[1:5,1:5]
curract[1:5]
sum(curract * w[,1])
sum(curract * w[,2])
sum(curract * w[,3])
sum(curract * w[,"art"])
sum(curract * w[,"ike"])
sum(curract * w[,"X20s"])
sum(curract * w[,"20s"])
names(curract)
curract["20s"]
input
input <- rep(0, times = 68); names(input) <- row.names(wt)
input <- rep(0, times = 68); names(input) <- row.names(w)
input["ike"]
input
length(input)
input["mike"]
curract <- rep(0, times = length(unames))
names(curract) <- unames
curract["Ike"]
currinput <- rep(0, times = length(unames))
names(currinput) <- unames
currinput["Ike"]
#Make a vector to store current inputs to all units:
currinput <- rep(0, times = length(unames))
names(currinput) <- unames
#Now set some inputs to 1:
currinput[c("Jets", "Married")] <- 1
#Make a vector to store current inputs to all units:
currinput <- rep(0, times = length(unames))
names(currinput) <- unames
#Now set some inputs to 1:
currinput[c("Jets", "Married")] <- 1
#Compute the net input to the first unit:
sum(currinput * w[,1])
length(unames)
length(currinput)
#Make a vector to store current inputs to all units:
currinput <- rep(0, times = length(unames))
names(currinput) <- unames
#Now set some inputs to 1:
#currinput[c("Jets", "Married")] <- 1
#Compute the net input to the first unit:
sum(currinput * w[,1])
names(currinput)
#Make a vector to store current inputs to all units:
currinput <- rep(0, times = length(unames))
names(currinput) <- unames
#Now set some inputs to 1:
currinput[c("Jets", "Mar")] <- 1
#Compute the net input to the first unit:
sum(currinput * w[,1])
currinput %*% w
net
net <- currinput %*% w
net
iacact <- dget("iac_activation.r")
iacact(net)
iacact(currinput, net)
iacact <- dget("iac_activation.r")
iacact(0, 10)
iacact <- dget("iac_activation.r")
iacact(0, 1)
iacact <- dget("iac_activation.r")
iacact(0, c(-10:10))
iacact <- dget("iac_activation.r")
iacact(rep(0, times = 21), c(-10:10))
iacact(0, 1)
curract <- iacact(currinput, net)
curract
curract <- iacact(currinput, net)
curract
#Make sure units with non-zero inputs adopt the input activation state:
curract[currinput != 0] <- currinput[currinput != 0]
#Visualize the activations:
barplot(curract)
#Make an output matrix where rows are timepoints and columns are units:
outputs <- rbind(currinput, curract)
outputs[,1:5]
net <- curract %*% w
curract <- iacact(curract, net)
curract[currinput != 0] <- currinput[currinput != 0]
outputs <- rbind(outputs, curract)
outputs[,1:5]
#Let's update for 18 more timesteps:
for(i in c(1:18)){
net <- curract %*% w
curract <- iacact(curract, net)
curract[currinput != 0] <- currinput[currinput != 0]
outputs <- rbind(outputs, curract)
}
outputs[,1:5]
barplot(outputs[21,])
plot(0,0,type ="n", xlab = "Time", ylab ="Activation", ylim = c(0,1), xlim = c(0,20))
for(i in c(1:68)) lines(0:20, outputs[,i])
plot(0,0,type ="n", xlab = "Time", ylab ="Activation", ylim = c(0,1), xlim = c(0,20))
for(i in c(1:68)) lines(0:20, outputs[,i])
text(rep(20, times = 68), outputs[21,], labels = names(outputs))
plot(0,0,type ="n", xlab = "Time", ylab ="Activation", ylim = c(0,1), xlim = c(0,20))
for(i in c(1:68)) lines(0:20, outputs[,i])
text(rep(20, times = 68), outputs[21,], labels = row.names(w))
help(jitter)
plot(0,0,type ="n", xlab = "Time", ylab ="Activation", ylim = c(0,1), xlim = c(0,20))
for(i in c(1:68)) lines(0:20, outputs[,i])
text(rep(20, times = 68), jitter(outputs[21,], .1), labels = row.names(w))
plot(0,0,type ="n", xlab = "Time", ylab ="Activation", ylim = c(0,1), xlim = c(0,20))
for(i in c(1:68)) lines(0:20, outputs[,i])
text(rep(20, times = 68), jitter(outputs[21,], 1), labels = row.names(w))
plot(0,0,type ="n", xlab = "Time", ylab ="Activation", ylim = c(0,1), xlim = c(0,20))
for(i in c(1:68)) lines(0:20, outputs[,i])
text(rep(20, times = 68), jitter(outputs[21,]), labels = row.names(w))
plot(0,0,type ="n", xlab = "Time", ylab ="Activation", ylim = c(0,1), xlim = c(0,20))
for(i in c(1:68)) lines(0:20, outputs[,i])
text(c(1:68)/20 + 16, jitter(outputs[21,]), labels = row.names(w))
plot(0,0,type ="n", xlab = "Time", ylab ="Activation", ylim = c(0,1), xlim = c(0,20))
for(i in c(1:68)) lines(0:20, outputs[,i])
text(rep(20, times = 68), outputs[21,], labels = row.names(w))
