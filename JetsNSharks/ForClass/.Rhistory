rm(list = ls())
sf <- matrix(NA, 4, 2)
sf[,1] <- c(1,0,1,0)
sf[,1] <- c(1,-1,1,-1)
sf[,2] <- c(1,1,-1,-1)
vox <- matrix(NA, 4, 3)
vox[,1] <- c(1,-1,-1,1)
vox[,2] <- c(-1,1,1,-1)
wox[,3] <- c(1,-1,-1,-1_
wox[,3] <- c(1,-1,-1,-1)
vox[,3] <- c(1,-1,-1,-1)
tmp <- cbind(sf, vox)
tmp
names(tmp) <-c("fly","animal","v1","v2","v3")
row.names(tmp) <- c("bird","car","plane","dog")
tmp
tmp <- as.data.frame(cbind(sf, vox))
names(tmp) <-c("fly","animal","v1","v2","v3")
row.names(tmp) <- c("bird","car","plane","dog")
tmp
m <- lm(v1 ~ fly + animal, data = tmp)
summary(m)
m <- lm(v1 ~ fly + animal + v3, data = tmp)
summary(m)
m <- lm(fly ~ v1 + v2 + v3, data = tmp)
summary(m)
tmp[tmp==-1] <- 0
m <- glm(fly ~ v1 + v2 + v3, data = tmp, family = 'binomial')
summary(m)
predict(m, tmp)
predict(m, tmp) > 0
summary(m)
m <- glm(animal ~ v1 + v2 + v3, data = tmp, family = 'binomial')
summary(m)
tmp
as.numeric(predict(m, tmp) > 0)
predict(m, tmp)
round(predict(m, tmp),2)
summary(m)
tmp
tmp$v2 <- c(1,0,0,0)
tmp$v3 <- c(0,0,1,0)
m <- glm(animal ~ v1 + v2 + v3, data = tmp, family = 'binomial')
summary(m)
predict(m, tmp)
tmp
row.names(tmp) <- c("bird","dog","car","plane")
predict(m, tmp)
m <- glm(fly ~ v1 + v2 + v3, data = tmp, family = 'binomial')
predict(m, tmp)
m <- glm(fly ~ v2 + v3, data = tmp, family = 'binomial')
predict(m, tmp)
row.names(tmp) <- c("bird","dog","plane","car")
m <- glm(fly ~ 0 + v2 + v3, data = tmp, family = 'binomial')
predict(m, tmp)
m <- glm(fly ~ 0 + v1 + v2, data = tmp, family = 'binomial')
predict(m, tmp)
summary(m)
m <- glm(fly ~ 0 + v2, data = tmp, family = 'binomial')
summary(m)
predict(m, tmp)
m <- glm(fly ~ 0 + v1 + v2, data = tmp, family = 'binomial')
summary(m)
predict(m, tmp)
m <- glm(v1 ~ 0 + fly + animal, data = tmp, family = 'binomial')
summary(m)
predict(m, tmp)
tmp
round(predict(m, tmp),2)
m <- glm(v2 ~ 0 + fly + animal, data = tmp, family = 'binomial')
round(predict(m, tmp),2)
round(predict(m, tmp),3)
summary(m)
m <- glm(v2 ~ 0 + fly + animal, data = tmp, family = 'binomial')
summary(m)
round(predict(m, tmp),3)
m <- glm(v2 ~ fly + animal, data = tmp, family = 'binomial')
summary(m)
round(predict(m, tmp),3)
summary(m)
m <- glm(v2 ~ 0 + fly + animal, data = tmp, family = 'binomial')
summary(m)
m <- glm(v2 ~ 0 + fly + animal, data = tmp, family = 'binomial')
tmp
m <- glm(v3 ~ 0 + fly + animal, data = tmp, family = 'binomial')
round(predict(m, tmp),3)
tmp$v3 <- c(0,0,0,1)
m <- glm(v3 ~ 0 + fly + animal, data = tmp, family = 'binomial')
round(predict(m, tmp),3)
tmp
tmp[tmp==0] <- -1
m <- glm(v3 ~ 0 + fly + animal, data = tmp, family = 'binomial')
m <- lm(v3 ~ 0 + fly + animal, data = tmp)
round(predict(m, tmp),3)
summary(m)
tmp
round(predict(m, tmp),3)
m <- lm(v2 ~ 0 + fly + animal, data = tmp)
round(predict(m, tmp),3)
m <- lm(v1 ~ 0 + fly + animal, data = tmp)
round(predict(m, tmp),3)
m <- lm(fly ~ 0 + v1 + v2, data = tmp)
round(predict(m, tmp),3)
m <- lm(fly ~ 0 + v2, data = tmp)
round(predict(m, tmp),3)
summary(m)
m <- lm(fly ~ 0 + v1 + v2, data = tmp)
summary(m)
m <- lm(fly ~ 0 + v1 + v3, data = tmp)
summary(m)
round(predict(m, tmp),3)
tmp[tmp==-1] <- 0
m <- glm(fly ~ 0 + v1 + v2, data = tmp, family = 'binomial')
round(predict(m, tmp),3)
sig
sig <- function(n){1/(exp(-1 * n))}
sig(predict(m, tmp),3)
sig(predict(m, tmp))
sig
sig<-function(n){1/(1 + exp(-1 * n))}
sig(predict(m, tmp))
round(sig(predict(m, tmp),2)
)
round(sig(predict(m, tmp)),2)
m <- glm(fly ~ 0 + v2, data = tmp, family = 'binomial')
round(sig(predict(m, tmp)),2)
m <- glm(v2 ~ 0 + fly + animal, data = tmp, family = 'binomial')
round(sig(predict(m, tmp)),2)
m <- glm(v2 ~ fly + animal, data = tmp, family = 'binomial')
round(sig(predict(m, tmp)),2)
m <- glm(v2 ~ 0 + fly + animal, data = tmp, family = 'binomial')
round(sig(predict(m, tmp)),2)
m <- glm(v1 ~ 0 + fly + animal, data = tmp, family = 'binomial')
round(sig(predict(m, tmp)),2)
m <- glm(animal ~ 0 + v1 + v2, data = tmp, family = 'binomial')
round(sig(predict(m, tmp)),2)
summary(m)
tmp
tmp1 <- tmp
for(i in c(2:20)) tmp1 <- rbind(tmp, tmp1)
head(tmp1)
dim(tmp1)
tmp1 <- tmp1 + matrix(runif(80 * 5)/100, 80, 5)
m <- glm(animal ~ 0 + v1 + v2, data = tmp1, family = 'binomial')
tmp1[tmp1<0] <- 0
tmp1[tmp1>1] <- 1
m <- glm(animal ~ 0 + v1 + v2, data = tmp1, family = 'binomial')
summary(m)
predict(m, tmp)
mean(as.numeric(predict(m, tmp1)>0)==tmp1$animal)
sig(predict(m, tmp1)>0))
round(sig(predict(m, tmp1)>0),2)
round(sig(predict(m, tmp1)>0),2) > .5
as.numeric(round(sig(predict(m, tmp1)>0),2) > .5)
as.numeric(round(sig(predict(m, tmp1)>0),2) > .5)==tmp1$animal
mean(as.numeric(round(sig(predict(m, tmp1)>0),2) > .5)==tmp1$animal)
tmp1[1:5,]
tmp1 <- tmp
tmp1[tmp1==0] <- -1
for(i in c(2:20)) tmp1 <- rbind(tmp1, tmp)
head(tmp1)
tmp1 <- tmp
for(i in c(2:20)) tmp1 <- rbind(tmp1, tmp)
tmp1[tmp1==0] <- -1
tmp1 <- tmp1 + matrix((runif(80 * 5)-.5)/100, 80, 5)
head(tmp1)
m <- lm(v1 ~ 0 + fly + animal, data = tmp1)
summary(m)
m <- lm(v2 ~ 0 + fly + animal, data = tmp1)
summary(m)
m <- lm(fly ~ 0 + v1 + v2, data = tmp1)
summary(m)
m0 <- lm(fly ~ 0 + v2, data = tmp1)
summary(m0)
anova(m0, m)
m0 <- lm(fly ~ v2, data = tmp1)
m <- lm(fly ~ v1 + v2, data = tmp1)
summary(m)
summary(m0)
anova(m0, m)
m <- lm(v2 ~ 0 + fly + animal, data = tmp1)
summary(m0)
m <- lm(v1 ~ 0 + fly + animal, data = tmp1)
summary(m)
plot(tmp1)
plot(tmp1[,1:2])
plot(tmp1[,1:2], pch = 16, col = c(1:80)%4 + 1)
plot(tmp1[,1:2], pch = 16, col = c(1:80)%%4 + 1)
plot(tmp1[,1:2], pch = 16, col = c("red","orange","blue","green")[c(1:80)%%4 + 1])
head(tmp1)
tmp
plot(tmp1[,1:2], pch = 16, col = c("red","orange","blue","green")[c(0:79)%%4 + 1])
m <- lm(v2 ~ 0 + fly + animal, data = tmp1)
summary(m)
m <- lm(v1 ~ 0 + fly + animal, data = tmp1)
summary(m)
m <- lm(v1 ~ fly + animal, data = tmp1)
summary(m)
tmp <- tmp[,1:4]
tmp1 <- tmp1[,1:4]
head(tmp1)
m <- lm(fly ~ v1 + v2, data = tmp1)
summary(m)
m <- lm(animal ~ v1 + v2, data = tmp1)
summary(m)
tmp
m <- lm(v1 ~ fly + animal, data = tmp1)
summary(m)
tmp[tmp==0] <- -1
m <- lm(v1 ~ fly + animal, data = tmp1)
summary(m)
m <- lm(v1 ~ fly + animal, data = tmp)
summary(m)
summary(m)$r-squared
summary(m)$r.squared
round(summary(m)$r.squared,3)
round(summary(m)$coefficients, 3)
m <- lm(v1 ~ fly + animal, data = tmp)
round(summary(m)$coefficients, 3)
round(summary(m)$r.squared,3)
m <- lm(v1 ~ fly + animal + v2, data = tmp)
round(summary(m)$coefficients, 3)
round(summary(m)$r.squared,3)
m <- lm(v1 ~ fly + animal, data = tmp)
round(summary(m)$r.squared,3)
round(summary(m)$coefficients, 3)
m <- lm(fly ~ v1 + v2, data = tmp)
summary(m)
m <- lm(v1 ~ fly + animal, data = tmp1)
summary(m)$coefficients
summary(m)$r-squared
summary(m)$r.squared
m <- lm(animal ~ v1 + v2, data = tmp1)
summary(m)$coefficients
summary(m)$r.squared
tmp
m <- lm(v1 ~ fly + animal, data = tmp)
summary(m)
round(summary(m)$coefficients, 3)
m <- lm(v1 ~ fly + animal + v2, data = tmp)
round(summary(m)$coefficients, 3)
q()
rm(list=ls())
shiny::runApp('C:/Github/CONNECT/RoomSchema/RSApp/tester')
runApp('C:/Github/CONNECT/RoomSchema/RSApp/tester')
runApp('C:/Github/CONNECT/RoomSchema/RSApp/tester')
runApp('C:/Github/CONNECT/RoomSchema/RSApp/tester')
runApp('C:/Github/CONNECT/RoomSchema/RSApp/tester')
runApp('C:/Github/CONNECT/RoomSchema/RSApp/tester')
runApp('C:/Github/CONNECT/RoomSchema/RSApp/tester')
runApp('C:/Github/CONNECT/RoomSchema/RSApp/tester')
runApp('C:/Github/CONNECT/RoomSchema/RSApp/tester')
runApp('C:/Github/CONNECT/RoomSchema/RSApp/tester')
runApp('C:/Github/CONNECT/RoomSchema/RSApp/tester')
runApp('C:/Github/CONNECT/RoomSchema/RSApp/tester')
runApp('C:/Github/CONNECT/RoomSchema/RSApp/tester')
runApp('C:/Github/CONNECT/RoomSchema/RSApp/tester')
runApp('C:/Github/CONNECT/RoomSchema/RSApp/tester')
runApp('C:/Github/CONNECT/RoomSchema/RSApp/tester')
runApp('C:/Github/CONNECT/RoomSchema/RSApp/tester')
shiny::runApp('C:/Github/CONNECT/JetsNSharks/JSModelApp')
shiny::runApp('C:/Github/CONNECT/RoomSchema/RSApp/RoomSchema')
runApp('C:/Github/CONNECT/RoomSchema/RSApp/RoomSchema')
runApp('C:/Github/CONNECT/RoomSchema/RSApp/RoomSchema')
runApp('C:/Github/CONNECT/RoomSchema/RSApp/RoomSchema')
runApp('C:/Github/CONNECT/RoomSchema/RSApp/RoomSchema')
runApp('C:/Github/CONNECT/RoomSchema/RSApp/RoomSchema')
runApp('C:/Github/CONNECT/RoomSchema/RSApp/RoomSchema')
runApp('C:/Github/CONNECT/RoomSchema/RSApp/RoomSchema')
runApp('C:/Github/CONNECT/RoomSchema/RSApp/RoomSchema')
x <- c(-20:20)/10
x
sig <- function(x){}
sig <- function(x){
1/(1 + exp(-1 * x))}
sig(x)
plot(x, sig(x), xlab = "Net input", ylab = "Unit activation", main = "Sigmoid activation function
")
plot(x, sig(x), xlab = "Net input", ylab = "Unit activation", main = "Sigmoid activation function", type = "l")
x <- c(-30:30)/10
plot(x, sig(x), xlab = "Net input", ylab = "Unit activation", main = "Sigmoid activation function", type = "l")
x <- c(-50:50)/10
plot(x, sig(x), xlab = "Net input", ylab = "Unit activation", main = "Sigmoid activation function", type = "l", ylim = c(0,1))
abline(v = 0, lty = 2)
abline(h = .5, lty = 2)
par(oma = c(2,2,2,2))
plot(x, sig(x), xlab = "Net input", ylab = "Unit activation", main = "Sigmoid activation function", type = "l", ylim = c(0,1))
abline(v = 0, lty = 2)
abline(h = .5, lty = 2)
sig(-1.7)
abline(v = -1.7)
rm(list = ls())
setwd("C:/Github/CONNECT/JetsNSharks/ForClass")
dtab <- read.csv("JS_data_table.csv")
head(dtab)
dtab[,1]
dtab[,2]
unique(dtab[,2])
unames <- c()
for(i in c(1:6)) unames <- c(unames, unique(dtab[,i]))
unames
gsub(" ", "", unames)
unames <- gsub(" ", "", unames)
unames
tolower(dtab[,1])
gsub(" ", "", tolower(dtab[,1]))
tmp <- gsub(" ", "", tolower(dtab[,1]))
tmp
unames <- c(tmp, unames)
unames
currinput <- rep(0, length(unames))
currinput
names(currinput) <- unames
currinput
currinput[c("Sing", "Sharks")]
currinput[c("Sing", "Sharks")] <- 1
currinput[c("Sing", "Sharks")]
barplot(currinput)
barplot(currinput, las =2 )
barplot(currinput, las =2, cex.names = .5)
w <- read.csv("JS_wts.csv", header = T, row.names=1)
w[1:5,1:5]
w <- as.matrix(w)
w[1:5,1:5]
image(w)
currinput
w[,1]
currinput * w[,1]
sum(currinput * w[,1])
currinput %*% w
iacact <- dget("iac_activation.r")
iacact
netinput <- currinput %*% w
netinput
iacact(currinput, netinput)
curract <- iacact(currinput, netinput)
currinput != 0
curract[currinput != 0] <- currinput[currinput != 0]
barplot(curract)
outputs <- rbind(currinput, curract)
outputs[,1:5]
net <- curract %*% w
net
curract <- iacact(curract, net)
curract
curract[currinput != 0] <- currinput[currinput != 0]
outputs <- rbind(outputs, curract)
outputs[,1:5]
for( in c(1:20)){}
for( in c(1:20)){
for(i in c(1:20)){
net <- curract %*% w
curract <- iacact(curract, net)
curract[currinput != 0] <- currinput[currinput != 0]
outputs <- rbind(outputs, curract)}
outputs[,1:5]
barplot(outputs[23,])
dim(outputs)
plot(c(1:23), outputs[,1], type ="l", ylim = c(0,1))
for(i in c(2:68)) lines(c(1:23), outputs[,i])
q()
