summary(m)$r.squared
tmp
m <- lm(v1 ~ fly + animal, data = tmp)
summary(m)
round(summary(m)$coefficients, 3)
m <- lm(v1 ~ fly + animal + v2, data = tmp)
round(summary(m)$coefficients, 3)
q()
rm(list = ls())
setwd("C:/Github/CONNECT/JetsNSharks")
plot.wts <- dget("plot_wts.r")
jswts <- read.csv("JS_wts.csv", header = T, row.names = 1)
jswts <- read.csv("JS_wts.csv", header = T, row.names = 1)
plot.wts(jswts)
plot.wts()
plot.wts
jswts <- as.matrix(jswts)
jswts[1:5,1:5]
plot.wts
plot.wts(jswts)
dim(jswts)
plot.wts <- dget("plot_wts.r")
plot.wts <- dget("plot_wts.r")
plot.wts(jswts)
jswts <- as.matrix(read.csv("JS_wts.csv", header = T, row.names = T))
jswts <- as.matrix(read.csv("JS_wts.csv", header = T, row.names = 1))
plot.wts(jswts)
jswts <- as.matrix(read.csv("JS_wts.csv", header = T, row.names = 1))
plot.wts(jswts)
plot.wts <- dget("plot_wts.r")
plot.wts(jswts)
jscoords <- as.matrix(read.csv("JS_unit_coords.csv"))
plot(jscoords)
head(jscoords)
jscoords <- as.matrix(read.csv("JS_unit_coords.csv", header = T, row.names = 1))
head(jscoords)
plot(jscoords)
jscoords <- as.matrix(read.csv("JS_unit_coords.csv", header = T, row.names = 1))
plot(jscoords)
jscoords <- as.matrix(read.csv("JS_unit_coords.csv", header = T, row.names = 1))
plot(jscoords)
ls()
dim(jswts)
inputs <- rep(0, times = 68)
inputs[1] <- 1
jscoords <- as.matrix(read.csv("JS_unit_coords.csv", header = T, row.names = 1))
plot(jscoords)
render.network <- dget("render_network.r")
render.network(inputs)
jscoords <- read.csv("JS_unit_coords.csv", header = T, row.names = 1)
render.network(inputs)
render.network <- dget("render_network.r")
render.network(inputs)
jscoords <- read.csv("JS_unit_coords.csv", header = T, row.names = 1)
render.network(inputs)
inputs <- runif(68)
render.network(inputs)
dim(jswts)
jswts[1:2,1:5]
dim(t(as.matrix(inputs)), jswts)
dim(t(as.matrix(inputs)) %*% jswts)
barplot(t(as.matrix(inputs)) %*% jswts)
tmp <- (t(as.matrix(inputs)) %*% jswts
)
tmp[1] <- 1
barplot(tmp)
jswts[1,]
tmp <- (as.matrix(inputs) %*% jswts)
dim(jswts)
dim(as.matrix(inputs))
tmp <- (jswts %*% as.matrix(inputs))
barplot(tmp)
tmp
barplot(tmp, beside= T)
inputs
inputs <- rep(0, times = 68)
inputs[1] <- 1
tmp <- (jswts %*% as.matrix(inputs))
barplot(tmp, beside= T)
iac.activation <- dget("iac_activation.r")
iac.activation(inputs, tmp)
tmp1 <- matrix(0,68,50)
currin <- inputs
for(i in c(1:50)){}
currnet <- t(as.matrix(currin)) %*% jswts
for(i in c(1:50)){
currnet <- t(as.matrix(currin)) %*% jswts
tmp1[,i] <- iac.activation(currin, currnet)
currin <- tmp1[,i]}
render.network(inputs, tmp1[,5])
render.network(tmp1[,5])
render.network(tmp1[,50])
update.acts <- dget("update_acts.r")
tmp1 <- update.acts(inputs)
update.acts
update.acts <- dget("update_acts.r")
tmp1 <- update.acts(inputs)
update.acts <- dget("update_acts.r")
tmp1 <- update.acts(inputs)
render.network(tmp1[,20])
tmp1 <- update.acts(inputs, timesteps=50)
render.network(tmp1[,50])
tmp1 <- update.acts(inputs, timesteps=100)
render.network(tmp1[,100])
for(i in c(1:100)){render.network(tmp1[,i]); readline()}
save.image("C:/Github/CONNECT/JetsNSharks/jetsnsharks.RData")
help(Sys.sleep)
help(delay)
for(i in c(1:100)){ render.network(tmp1[,i]); Sys.sleep(.5)}
for(i in c(1:100)){ render.network(tmp1[,i])}
for(i in c(1:100)){ render.network(tmp1[,i]); Sys.sleep(.05)}
update.acts(inputs, timesteps = 30, dt = 0.1)
tmp1 <- update.acts(inputs, timesteps = 30, dt = 0.1)
for(i in c(1:100)){ render.network(tmp1[,i]); Sys.sleep(.05)}
for(i in c(1:30)){ render.network(tmp1[,i]); Sys.sleep(.05)}
for(i in c(1:30)){ render.network(tmp1[,i]); Sys.sleep(.01)}
for(i in c(1:30)){ render.network(tmp1[,i]); Sys.sleep(.01)}
help(wait)
ls()
library(ggplot2)
p <- ggplot() + xlim(0,11) + ylim(0,15) + geom_rect(xmin= 5, xmax = 7, ymin = 5, ymax = 7)
p
p <- ggplot() + xlim(0,11) + ylim(0,15) + geom_rect(data = jscoords, aes(xmin=X, xmax=X+1, ymin=Y, ymax=Y+1)
)
p
p <- ggplot() + xlim(0,11) + ylim(0,15) + geom_rect(data = jscoords, aes(xmin=X, xmax=X+1, ymin=Y, ymax=Y+1, fill=hsv(0, tmp1[,5],1)))
p
help(geom_rect)
p <- ggplot() + xlim(0,11) + ylim(0,15) + geom_rect(data = jscoords, aes(xmin=X, xmax=X+1, ymin=Y, ymax=Y+1, fill=hsv(0, tmp1[,5],1), inherit.aes=FALSE))
p <- ggplot() + xlim(0,11) + ylim(0,15) + geom_rect(data = jscoords, aes(xmin=X, xmax=X+1, ymin=Y, ymax=Y+1, fill=hsv(0, tmp1[,5],1)), inherit.aes=FALSE)
p
p <- ggplot() + xlim(0,11) + ylim(0,15) + geom_rect(data = jscoords, aes(xmin=X, xmax=X+1, ymin=Y, ymax=Y+1, scale_fill_continuous(hsv(0, tmp1[,5],1))), inherit.aes=FALSE)
p <- ggplot() + xlim(0,11) + ylim(0,15) + geom_rect(data = jscoords, aes(xmin=X, xmax=X+1, ymin=Y, ymax=Y+1, scale_fill_continuous(tmp1[,5])))
p
p <- ggplot() + xlim(0,11) + ylim(0,15) + geom_rect(data = jscoords, aes(xmin=X, xmax=X+1, ymin=Y, ymax=Y+1)
)
p
help("scale_fill_continuous")
head(tmp)
tmp <- cbind(jscoords, tmp1)
names(tmp)
dim(tmp)
names(tmp)[3:32] <- paste0("ts", names(tmp)[3:32])
names(tmp)
p <- ggplot() + xlim(0,11) + ylim(0,15) + geom_rect(data = jscoords, aes(xmin=X, xmax=X+1, ymin=Y, ymax=Y+1, fill = ts5)
)
p + scale_fill_continuous("viridis")
p <- ggplot() + xlim(0,11) + ylim(0,15) + geom_rect(data = tmp, aes(xmin=X, xmax=X+1, ymin=Y, ymax=Y+1, fill = ts5))
p + scale_fill_continuous("viridis")
p + scale_fill_continuous("gradient")
p + scale_colour_continuous("gradient")
p <- ggplot() + xlim(0,11) + ylim(0,15) + geom_rect(data = tmp, aes(xmin=X, xmax=X+1, ymin=Y, ymax=Y+1, fill = ts15))
p + scale_colour_continuous("gradient")
dim(tmp)
p <- ggplot() + xlim(0,11) + ylim(0,15) + geom_rect(data = tmp, aes(xmin=X, xmax=X+1, ymin=Y, ymax=Y+1, fill = ts32))
p + scale_colour_continuous("gradient")
p <- ggplot() + xlim(0,11) + ylim(0,15) + geom_rect(data = tmp, aes(xmin=X, xmax=X+1, ymin=Y, ymax=Y+1, fill = ts30))
p + scale_colour_continuous("gradient")
p <- ggplot() + xlim(0,11) + ylim(0,15) + geom_rect(data = tmp, aes(xmin=X, xmax=X+1, ymin=Y, ymax=Y+1, fill = ts30 * 10))
p + scale_colour_continuous("gradient")
p <- ggplot() + xlim(0,11) + ylim(0,15) + geom_rect(data = tmp, aes(xmin=X, xmax=X+1, ymin=Y, ymax=Y+1, fill = ts30 * 10), colour = "white")
p + scale_colour_continuous("gradient")
p + scale_colour_gradient(low = "white", high = "red")
p + scale_colour_gradient(low = "#FFFFFF", high = "#FF0000")
p + scale_colour_continuous(scale_colour_gradient(low = "#FFFFFF", high = "#FF0000"))
p + scale_fill_continuous(scale_colour_gradient(low = "#FFFFFF", high = "#FF0000"))
p + scale_fill_continuous("viridis")
p
p + scale_fill_continuous(type = "viridis")
p + scale_fill_continuous(type = "gradient")
p + scale_fill_continuous(type = "viridis")
help("colorRamp")
white2red <- colorRampPalette("white","red")
white2red <- colorRampPalette(c("white","red"))
white2red(5)
white2red(25)
p + scale_fill_continuous(type = "white2red")
p + scale_fill_continuous(type = colorRampPalette("white","red"))
p + scale_fill_continuous(type = scale_colour_gradient(low = "white", high = "red"))
getOption("ggplot2.continuous.fill")
help(options)
p + scale_colour_gradient(low = "white", high = "red")
p + scale_fill_gradient(low = "white", high = "red")
p <- ggplot() + xlim(0,11) + ylim(0,15) + geom_rect(data = tmp, aes(xmin=X, xmax=X+1, ymin=Y, ymax=Y+1, fill = ts30), colour = "black")
p + scale_fill_gradient(low = "white", high = "red")
p <- p + + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank())
p <- p + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank())
p + scale_fill_gradient(low = "white", high = "red")
p <- p + theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank(),
axis.title.y=element_blank(),
axis.text.y=element_blank(),
axis.ticks.y=element_blank())
p + scale_fill_gradient(low = "white", high = "red")
render.network <- dget("render_network.r")
render.netword(tmp1[,20])
render.network(tmp1[,20])
render.network(tmp1[,1])
render.network <- dget("render_network.r")
render.network(tmp1[,1])
render.network(tmp1[,1])
tmp1[,]1
tmp1[,1]
p <- render.network(tmp1[,1])
p
render.network <- dget("render_network.r")
p <- render.network(tmp1[,1])
p
p + geom_text(data = coord, aes(X + .5, Y + .5, labels=row.names(coord)))
p + geom_text(data = jscoords, aes(X + .5, Y + .5, labels=row.names(coord)))
help(geom_text)
render.network <- dget("render_network.r")
p <- render.network(tmp1[,1])
p
render.network <- dget("render_network.r")
p <- render.network(tmp1[,1])
render.network <- dget("render_network.r")
p <- render.network(tmp1[,1])
render.network <- dget("render_network.r")
p <- render.network(tmp1[,1])
render.network <- dget("render_network.r")
p <- render.network(tmp1[,1])
render.network <- dget("render_network.r")
p <- render.network(tmp1[,1])
p
p <- render.network(tmp1[,1])
p
render.network <- dget("render_network.r")
p <- render.network(tmp1[,1])
render.network <- dget("render_network.r")
p <- render.network(tmp1[,1])
render.network <- dget("render_network.r")
p <- render.network(tmp1[,1])
p
render.network()
render.network
render.network <- dget("render_network.r")
p <- render.network(tmp1[,1])
render.network <- dget("render_network.r")
p <- render.network(tmp1[,1])
render.network <- dget("render_network.r")
p <- render.network(tmp1[,1])
render.network <- dget("render_network.r")
p <- render.network(tmp1[,1])
render.network <- dget("render_network.r")
p <- render.network(tmp1[,1])
p
render.network <- dget("render_network.r")
p <- render.network(tmp1[,1])
p
render.network <- dget("render_network.r")
p <- render.network(tmp1[,1])
p
render.network <- dget("render_network.r")
p <- render.network(tmp1[,1])
render.network <- dget("render_network.r")
p <- render.network(tmp1[,1])
p
render.network <- dget("render_network.r")
render.network <- dget("render_network.r")
p <- render.network(tmp1[,1])
p
render.network <- dget("render_network.r")
p <- render.network(tmp1[,1])
p
save.image("C:/Github/CONNECT/JetsNSharks/jetsnsharks.RData")
library(reshape2)
names(tmp1)
colnames(tmp1)
tmp1
tmp <- cbind(jscoords, tmp1)
names(tmp)
tmp2 <- melt(tmp, 1:2, variable.name = "timestep")
head(tmp2)
p <- ggplot(tmp2, aes(x=X, y=Y)) + geom_rect(data = NULL, aes(xmin=X, ymin=Y, xmax=X+1, ymax=Y+1), colour = "white") + colour_fill_gradient(type = "viridis")
p <- ggplot(tmp2, aes(x=X, y=Y)) + geom_rect(data = NULL, aes(xmin=X, ymin=Y, xmax=X+1, ymax=Y+1, fill=value), colour = "black") + scale_fill_gradient(low="white", high="red")
library(gganimate)
install.packages("gganimate")
library(gganimate)
p + gganimate(transition_time(timestep))
p + transition_states(timestep)
anim
anim <- p + transition_states(timestep)
anim
anim
animate(anim)
library(plotly)
library(gapminder)
install.packages("gapminder")
library(gapminder)
head(tmp2)
p <- ggplot(tmp2) + geom_rect(aes(xmin=X, ymin=Y, xmax=X+1, ymax=Y+1, fill=value, frame=timestep)) + scale_fill_gradient(low = "white", high = "red")
ggplotly(p)
tmp2[tmp2$timestep==1,]
tmp2[tmp2$timestep==2,]
names(tmp)
tmp[1:5,1:5]
tmp <- cbind(row.names(tmp), tmp)
names(tmp)
names(tmp)[1] <- "unit"
tmp2 <- melt(tmp, 1:3, variable.name = "timestep", value.name = "activation")
head(tmp2)
p <- ggplot(tmp2)
p <- p + geom_rect(aes(xmin=X, ymin=Y, xmax=X+1, ymax=Y+1, fill=activation, ids=unit))
p <- ggplot(tmp2)
p <- p + geom_rect(aes(xmin=X, ymin=Y, xmax=X+1, ymax=Y+1, fill=activation, ids=unit, frame = timestep))
p <- p + scale_fill_gradient(low = "white", high = "red")
ggplotly(p)
ggplotly(p)
ggplotly(p)
fig <- ggplotly(p)
fig <- fig %>% animation_opts(transition=0)
fig
fig <- fig %>% animation_opts(frame = 200)
fig
fig <- fig %>% animation_opts(frame = 200, transition = 0)
fig
fig <- fig %>% animation_opts(frame = 100, transition = 0)
fig
fig <- fig %>% animation_opts(frame = 50, transition = 0)
fig
help(melt)
update.acts
tmp <- update.acts(inputs, timesteps = 40)
dim(tmp)
render.animation <- dget("render_animation.r")
fig <- render.animation(tmp)
render.animation <- dget("render_animation.r")
fig <- render.animation(tmp)
render.animation <- dget("render_animation.r")
fig <- render.animation(tmp)
fig
render.animation <- dget("render_animation.r")
fig <- render.animation(tmp)
fig
render.animation <- dget("render_animation.r")
fig <- render.animation(tmp)
fig
render.animation <- dget("render_animation.r")
fig <- render.animation(tmp)
fig
render.animation <- dget("render_animation.r")
fig <- render.animation(tmp)
fig
render.animation <- dget("render_animation.r")
fig <- render.animation(tmp)
fig
max(round(tmp, 3))
min(round(tmp,3))
render.animation <- dget("render_animation.r")
fig <- render.animation(tmp)
fig
render.animation <- dget("render_animation.r")
fig <- render.animation(tmp)
fig
render.animation <- dget("render_animation.r")
fig <- render.animation(tmp)
fig
help("scale_fill_gradient")
help("scale_alpha")
render.animation <- dget("render_animation.r")
fig <- render.animation(tmp)
fig
render.animation <- dget("render_animation.r")
fig <- render.animation(tmp)
fig
render.animation <- dget("render_animation.r")
fig <- render.animation(tmp)
fig
rm(fig)
render.animation <- dget("render_animation.r")
fig <- render.animation(tmp)
fig
render.animation <- dget("render_animation.r")
fig <- render.animation(tmp)
fig
render.animation <- dget("render_animation.r")
fig <- render.animation(tmp)
render.animation <- dget("render_animation.r")
fig <- render.animation(tmp)
fig
render.animation <- dget("render_animation.r")
fig <- render.animation(tmp)
fig
render.animation <- dget("render_animation.r")
fig <- render.animation(tmp)
fig
render.animation <- dget("render_animation.r")
fig <- render.animation(tmp)
fig
render.animation <- dget("render_animation.r")
fig <- render.animation(tmp)
fig
render.animation <- dget("render_animation.r")
fig <- render.animation(tmp)
fig
render.animation <- dget("render_animation.r")
fig <- render.animation(tmp)
fig
render.animation <- dget("render_animation.r")
fig <- render.animation(tmp)
fig
render.animation <- dget("render_animation.r")
fig <- render.animation(tmp)
fig
render.network(inputs, tmp[,10])
inputs
is.matrix(tmp)
render.network(tmp[,10])
render.network <- dget("render_network.r")
render.network(tmp[,10])
render.animation <- dget("render_animation.r")
fig <- render.animation(tmp)
fig
render.network <- dget("render_network.r")
render.network(tmp[,10])
fig <- render.animation(tmp)
fig
render.network <- dget("render_network.r")
p <- er_network.r")
>
p <- render.network(tmp[,10])
plotly(p)
ggplotly(p)
render.network <- dget("render_network.r")
p <- render.network(tmp[,10])
ggplotly(p)
render.network <- dget("render_network.r")
p <- render.network(tmp[,10])
ggplotly(p)
render.network <- dget("render_network.r")
p <- render.network(tmp[,10])
ggplotly(p)
for(i in c(1:30)){ggplotly(render.network(tmp[,i]))}
for(i in c(1:30)){print(ggplotly(render.network(tmp[,i])))}
for(i in c(1:30)){print(render.network(tmp[,i]))}
render.network <- dget("render_network.r")
for(i in c(1:30)){print(render.network(tmp[,i]))}
for(i in c(1:30)){print(render.network(tmp[,i]))}
win()
for(i in c(1:30)){render.network(tmp[,i])}
windows()
for(i in c(1:30)){render.network(tmp[,i])}
for(i in c(1:30)){render.network(tmp[,i])}
for(i in c(1:30)){print(render.network(tmp[,i]))}
for(i in c(1:30)){print(render.network(tmp[,i]))}
for(i in c(1:30)){print(render.network(tmp[,i])); Sys.sleep(.5)}
68/3
69/13
69/3
shiny::runApp('JSModel')
setwd("C:/Github/CONNECT/JetsNSharks/JSModel")
runApp()
runApp()
runApp()
runApp()
install.packages("shinyWidgets")
library(shinyWidgets)
help(checkboxGroupButtons)
runApp()
runApp()
runApp()
load("C:/Github/CONNECT/JetsNSharks/JSModel/.RData")
shiny::runApp()
runApp()
runApp()
library(dplyr)
runApp()
library(stringr)
runApp()
ls()
tmp <- row.names(jswts)
nchar(tmp)
nchar(str_pad(tmp, 14, side="both"
, " "))
tmp
jswts <- as.matrix(read.csv("./data/JS_wts.csv", header = T, row.names = 1))
tmp <- row.names(jswts)
nchar(tmp)
runApp()
runApp()
runApp()
runApp()
runApp()
help(actionBttn)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
load("C:/Github/CONNECT/JetsNSharks/JSModel/.RData")
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
load("C:/Github/CONNECT/JetsNSharks/JSModel/.RData")
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
