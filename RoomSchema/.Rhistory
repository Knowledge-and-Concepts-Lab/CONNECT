summary(m0)
anova(m0, m)
m0 <- lm(fly ~ v2, data = tmp1)
m <- lm(fly ~ v1 + v2, data = tmp1)
summary(m)
summary(m0)
anova(m0, m)
m <- lm(v2 ~ 0 + fly + animal, data = tmp1)
summary(m0)
m <- lm(v1 ~ 0 + fly + animal, data = tmp1)
summary(m)
plot(tmp1)
plot(tmp1[,1:2])
plot(tmp1[,1:2], pch = 16, col = c(1:80)%4 + 1)
plot(tmp1[,1:2], pch = 16, col = c(1:80)%%4 + 1)
plot(tmp1[,1:2], pch = 16, col = c("red","orange","blue","green")[c(1:80)%%4 + 1])
head(tmp1)
tmp
plot(tmp1[,1:2], pch = 16, col = c("red","orange","blue","green")[c(0:79)%%4 + 1])
m <- lm(v2 ~ 0 + fly + animal, data = tmp1)
summary(m)
m <- lm(v1 ~ 0 + fly + animal, data = tmp1)
summary(m)
m <- lm(v1 ~ fly + animal, data = tmp1)
summary(m)
tmp <- tmp[,1:4]
tmp1 <- tmp1[,1:4]
head(tmp1)
m <- lm(fly ~ v1 + v2, data = tmp1)
summary(m)
m <- lm(animal ~ v1 + v2, data = tmp1)
summary(m)
tmp
m <- lm(v1 ~ fly + animal, data = tmp1)
summary(m)
tmp[tmp==0] <- -1
m <- lm(v1 ~ fly + animal, data = tmp1)
summary(m)
m <- lm(v1 ~ fly + animal, data = tmp)
summary(m)
summary(m)$r-squared
summary(m)$r.squared
round(summary(m)$r.squared,3)
round(summary(m)$coefficients, 3)
m <- lm(v1 ~ fly + animal, data = tmp)
round(summary(m)$coefficients, 3)
round(summary(m)$r.squared,3)
m <- lm(v1 ~ fly + animal + v2, data = tmp)
round(summary(m)$coefficients, 3)
round(summary(m)$r.squared,3)
m <- lm(v1 ~ fly + animal, data = tmp)
round(summary(m)$r.squared,3)
round(summary(m)$coefficients, 3)
m <- lm(fly ~ v1 + v2, data = tmp)
summary(m)
m <- lm(v1 ~ fly + animal, data = tmp1)
summary(m)$coefficients
summary(m)$r-squared
summary(m)$r.squared
m <- lm(animal ~ v1 + v2, data = tmp1)
summary(m)$coefficients
summary(m)$r.squared
tmp
m <- lm(v1 ~ fly + animal, data = tmp)
summary(m)
round(summary(m)$coefficients, 3)
m <- lm(v1 ~ fly + animal + v2, data = tmp)
round(summary(m)$coefficients, 3)
q()
ls()
rm(list = ls())
help(rect)
setwd("C:/Github/CONNECT/RoomSchema")
render.network <- dget("render_network.r")
inputs <- as.numeric(runif(25) < .5)
amat <- matrix(0, 25, 20)
render.network(inputs, amat)
library(plotrix)
render.network <- dget("render_network.r")
render.network <- dget("render_network.r")
render.network(inputs, amat)
render.network <- dget("render_network.r")
render.network(inputs, amat)
render.network <- dget("render_network.r")
render.network(inputs, amat)
render.network <- dget("render_network.r")
render.network(inputs, amat)
render.network <- dget("render_network.r")
render.network(inputs, amat)
render.network(inputs, amat)
render.network <- dget("render_network.r")
render.network(inputs, amat)
render.network <- dget("render_network.r")
render.network(inputs, amat)
inputs <- as.numeric(runif(40) < .5)
amat <- matrix(0, 40, 20)
render.network(inputs, amat)
inputs <- as.numeric(runif(40) < .5)
render.network(inputs, amat)
render.network <- dget("render_network.r")
render.network(inputs, amat)
rwts <- read.csv("room_weights.csv", header = T, row.names = 1)
dim(rwts)
row.names(amat) <- row.names(rwts)
rwts <- read.csv("room_weights.csv", header = T, row.names = 1)
render.network(inputs, amat)
render.network <- dget("render_network.r")
render.network(inputs, amat)
render.network <- dget("render_network.r")
render.network(inputs, amat)
render.network <- dget("render_network.r")
render.network(inputs, amat)
render.network <- dget("render_network.r")
render.network <- dget("render_network.r")
render.network(inputs, amat)
render.network <- dget("render_network.r")
render.network(inputs, amat)
render.network <- dget("render_network.r")
render.network(inputs, amat)
render.network <- dget("render_network.r")
render.network(inputs, amat)
render.network <- dget("render_network.r")
render.network(inputs, amat)
rwts[lower.tri(rwts)] <- rwts[upper.tri(rwts)]
rwts[1:5,1:5]
tmp <- cbind(runif(40)-.5, rwts)
tmp[1:5,1:5]
colnames(tmp)[1] <- "bias"
tmp[1:5,1:5]
rtws <- tmp
tmp <- append(c(1), inputs)
rwts %*% ymp
rwts %*% tmp
length(tmp)
as.matrix(tmp)
rwts %*% as.matrix(tmp)
rwts <- as.matrix(rwts)
rwts %*% as.matrix(tmp)
dim(rwts)
dim(as.matrix(tmp))
rwts[1:5,1:5]
rwts <- cbind(runif(50)-.5, rwts)
dim(rwts)
rwts[1:5,1:5]
colnames(rwts)[1] <- "bias"
rwts[1:5,1:5]
rwts$bias
rwts[,1]
rwts %*% as.matrix(tmp)
c(1:5) * c(1:5)
update.acts <- dget("update_acts.r")
inputs
length(inputs)
update.acts(inputs)
update.acts(inputs)
is.matrix(inputs)
update.acts <- dget("update_acts.r")
update.acts(inputs)
update.acts <- dget("update_acts.r")
update.acts(inputs)
update.acts <- dget("update_acts.r")
update.acts(inputs)
update.acts <- dget("update_acts.r")
update.acts(inputs)
is.matrix(rwts)
update.acts(inputs, rwts = rwts)
update.acts <- dget("update_acts.r")
update.acts(inputs, rwts = rwts)
update.acts <- dget("update_acts.r")
update.acts(inputs, rwts = rwts)
length(inputs)
dim(rwts)
update.acts <- dget("update_acts.r")
update.acts(inputs, rwts = rwts)
update.acts <- dget("update_acts.r")
update.acts(inputs, rwts = rwts)
update.acts <- dget("update_acts.r")
update.acts(inputs, rwts = rwts)
update.acts <- dget("update_acts.r")
update.acts(inputs, rwts = rwts)
update.acts <- dget("update_acts.r")
update.acts(inputs, rwts = rwts)
update.acts <- dget("update_acts.r")
update.acts(inputs, rwts = rwts)
update.acts <- dget("update_acts.r")
update.acts(inputs, rwts = rwts)
update.acts <- dget("update_acts.r")
update.acts(inputs, rwts = rwts)
update.acts <- dget("update_acts.r")
update.acts(inputs, rwts = rwts)
update.acts <- dget("update_acts.r")
update.acts(inputs, rwts = rwts)
update.acts <- dget("update_acts.r")
update.acts(inputs, rwts = rwts)
rwts <- rwts * .0001
update.acts(inputs, rwts = rwts)
update.acts <- dget("update_acts.r")
update.acts(inputs, rwts = rwts)
tmp <- update.acts(inputs, rwts = rwts)
render.network(inputs, tmp)
row.names(tmp) <- row.names(amat)
render.network(inputs, tmp)
plot(tmp[11,])
render.network(inputs, tmp)
render.network <- dget("render_network.r")
render.network(inputs, tmp)
1644/41
1644/40
40^2
1640/41
tmp <- read.csv("weight_vector.csv")
length(tmp)
tmp <- read.csv("weight_vector.csv", header = F)
tmp
dim(tmp)
tmp <- matrix(tmp[,1], 41, 40)
tmp[1:5,1:5]
t(tmp)
tmp <- t(tmp)
tmp[1:5, 1:5]
dim(tmp)
dim(rwts)
render.network(inputs, tmp)
ls()
inputs
row.names(tmp) <- row.names(amat)
amat[1:5,1:5]
inputs <- rep(0, times = 40)
inputs[5] <- 1
update.acts(inputs, tmp)
update.acts()
update.acts(inputs, timesteps = 20, rwts = tmp)
render.network(inputs, update.acts(inputs, tmp))
tmp[1:5,1:5]
tmp1 <- update.acts(inputs, tmp)
inputs
tmp1 <- update.acts(inputs, tmp)
tmp1 <- update.acts(inputs, tmp)
update.acts <- dget("update_acts.r")
tmp1 <- update.acts(inputs, tmp)
save.image("C:/Github/CONNECT/RoomSchema/RoomSchema.RData")
load("C:/Github/CONNECT/RoomSchema/RoomSchema.RData")
tmp1 <- update.acts(inputs, tmp)
tmp1 <- update.acts(inputs, 20, tmp1)
tmp1 <- update.acts(inputs, 20, tmp)
tmp1[1:2,]
render.network(inputs, tmp1)
row.names(tmp1) <- row.names(amat)
render.network(inputs, tmp1)
rwts <- as.matrix(read.csv("room_weights.csv", header = T, row.names = 1))
rwts[1:5,1:5]
update.acts(inputs, 20, rwts)
update.acts <- dget("update_acts.r")
update.acts(inputs, 20, rwts)
save.image("C:/Github/CONNECT/RoomSchema/RoomSchema.RData")
rwts <- as.matrix(read.csv("room_weights.csv", header = T, row.names = 1))
update.acts(inputs, 20, rwts)
update.acts(inputs, 2, rwts)
iac.activation <- dget("iac_update.r")
inputs
iac.activation(inputs, rwts %*% inputs)
iac.activation(inputs, rwts %*% as.matrix(inputs))
inputs
dim(rwts)
dim(as.matrix(inputs))
rwts <- t(rwts)
rwts %*% as.matrix(inputs)
iac.activation(inputs, rwts %*% as.matrix(inputs))
iac.activation <- dget("iac_update.r")
iac.activation(inputs, rwts %*% as.matrix(inputs))
length(inputs)
rwts[1:5,1:5]
dim(rwts)
rwts <- t(rwts)
rwts %*% as.matrix(append(c(1), inputs))
iac.activation(inputs, rwts %*% as.matrix(append(c(1), inputs)))
update.acts <- dget("update_acts.r")
update.acts <- dget("update_acts.r")
update.acts(inputs)
update.acts(inputs, rwts, 2)
update.acts <- dget("update_acts.r")
update.acts()
update.acts
update.acts(inputs, rwts, 1)
update.acts(inputs, rwts, 2)
update.acts(inputs, rwts, 1)
update.acts <- dget("update_acts.r")
update.acts(inputs, rwts, 1)
update.acts <- dget("update_acts.r")
update.acts(inputs, rwts, 1)
update.acts(inputs, rwts, 2)
update.acts <- dget("update_acts.r")
update.acts(inputs, rwts, 2)
update.acts(inputs, rwts, 20)
tmp1 <- update.acts(inputs, rwts, 20)
ls()
amat[1:5,1:5]
rwts[1:5,1:5]
row.names(tmp1) <- row.names(rwt)
row.names(tmp1) <- row.names(rwts)
render.network(inputs, tmp1)
update.acts <- dget("update_acts.r")
tmp1 <- update.acts(inputs, rwts, 20)
render.network(inputs, update(inputs, rwts, 20))
render.network(inputs, update.acts(inputs, rwts, 20))
render.network(inputs, update.acts(inputs, rwts, dt = 0.2, timesteps = 20))
update.acts
update.acts <- dget("update_acts.r")
update.acts
render.network(inputs, update.acts(inputs, rwts, dt = 0.2, timesteps = 20))
render.network <- dget("render_network.r")
render.network(inputs, update.acts(inputs, rwts, dt = 0.2, timesteps = 20))
render.network <- dget("render_network.r")
render.network(inputs, update.acts(inputs, rwts, dt = 0.2, timesteps = 20))
render.network <- dget("render_network.r")
render.network(inputs, update.acts(inputs, rwts, dt = 0.2, timesteps = 20))
update.acts <- dget("update_acts.r")
render.network(inputs, update.acts(inputs, rwts, dt = 0.2, timesteps = 20))
inmat <- matrix(0,4,40)
inmat[1,] <- inputs
inmat[2,12] <- 1
render.network(inputs, update.acts(inmat[2,], rwts, dt = 0.2, timesteps = 20))
inmat[2,21] <- 1
render.network(inputs, update.acts(inmat[2,], rwts, dt = 0.2, timesteps = 20))
render.network(inputs, update.acts(inmat[3,], rwts, dt = 0.2, timesteps = 20))
inmat[2,21] <- 0
inmat[3,21] <- 1
render.network(inputs, update.acts(inmat[3,], rwts, dt = 0.2, timesteps = 20))
render.network(inputs, update.acts(inmat[3,], rwts, dt = 0.2, timesteps = 30))
inmat[4,27] <- 1
render.network(inputs, update.acts(inmat[4,], rwts, dt = 0.2, timesteps = 30))
inmat <- rbind(inmat, rep(0, times = 40))
inmat[5,35] <- 1
render.network(inputs, update.acts(inmat[5,], rwts, dt = 0.2, timesteps = 30))
render.network(inputs, update.acts(inmat[5,], rwts, dt = 0.3, timesteps = 30))
render.network(inputs, update.acts(inmat[5,], rwts, dt = 0.5, timesteps = 30))
inmat[5,28] <- 1
render.network(inputs, update.acts(inmat[5,], rwts, dt = 0.5, timesteps = 30))
render.network(inputs, update.acts(inmat[5,], rwts, dt = 0.5, timesteps = 30, clamp = FALSE))
render.network(inputs, update.acts(inmat[5,], rwts, dt = 0.5, timesteps = 30))
render.network(inputs, update.acts(inmat[5,], rwts, dt = 0.1, timesteps = 30))
render.network(inmat[5,], update.acts(inmat[5,], rwts, dt = 0.1, timesteps = 30))
save.image("C:/Github/CONNECT/RoomSchema/RoomSchema.RData")
iac.activation <- dget("iac_activation.r")
iac.activation <- dget("iac_activation.r")
iac.activation <- dget("iac_activation.r")
render.network(inmat[5,], update.acts(inmat[5,], rwts, dt = 0.1, timesteps = 30))
update.acts <- dget("update_acts.r")
render.network(inmat[5,], update.acts(inmat[5,], rwts, dt = 0.1, timesteps = 30))
render.network(inmat[4,], update.acts(inmat[4,], rwts, dt = 0.1, timesteps = 30))
render.network(inmat[4,], update.acts(inmat[4,], rwts, dt = 0.1, timesteps = 30, decay = FALSE))
render.network(inmat[5,], update.acts(inmat[4,], rwts, dt = 0.1, timesteps = 30, decay = FALSE))
render.network(inmat[5,], update.acts(inmat[5,], rwts, dt = 0.1, timesteps = 30, decay = FALSE))
tmp <- inmat[1,]
tmp
t(as.matrix(tmp)) %*% as.matrix(tmp)
as.matrix(tmp) %*% t(as.matrix(tmp))
dim(as.matrix(tmp) %*% t(as.matrix(tmp)))
dim(rwts)
matrix(1,2,3) * matrix(1,2,3)
sum(matrix(1,2,3) * matrix(1,2,3))
tmp <- update.acts(inmat[5,], rwts, dt = 0.1, timesteps = 30, decay = FALSE)
dim(tmp)
tmp1 <- tmp[,3]
tmp1
tmp2 <- tmp1[1:5]
tmp2 <- append(c(1), tmp1[1:5])
as.matrix(tmp2) %*% t(as.matrix(tmp2))
goodness <- dget("goodness.r")
inputs <- inmat[1,]
states <- tmp[,3]
length(states)
goodness(inputs, states, rwts)
goodness <- dget("goodness.r")
goodness(inputs, states, rwts)
goodness <- dget("goodness.r")
goodness(inputs, states, rwts)
dim(tmp)
tmp1 <- rep(0, times = 30)
inputs <- inmat[1,]
tmp <- update.acts(inputs, rwts, timesteps = 30)
for(i in c(1:30)) tmp1[i] <- goodness(inputs, tmp[,i], rwts)
tmp1
mtext(side = 1, at = c(0:29) + .5, line = 0, text = round(tmp1))
mtext(side = 1, at = c(1:30) + .5, line = -1, text = round(tmp1))
render.network(inputs, tmp)
mtext(side = 1, at = c(1:30) + .5, line = -1, text = round(tmp1), cex = .75)
tmp <- update.acts(inputs, rwts, timesteps = 30, dt = .1)
render.network(inputs, tmp)
for(i in c(1:30)) tmp1[i] <- goodness(inputs, tmp[,i], rwts)
mtext(side = 1, at = c(1:30) + .5, line = -1, text = round(tmp1), cex = .75)
tmp <- update.acts(inputs, rwts, timesteps = 30, dt = .1, decay = F)
render.network(inputs, tmp)
for(i in c(1:30)) tmp1[i] <- goodness(inputs, tmp[,i], rwts)
mtext(side = 1, at = c(1:30) + .5, line = -1, text = round(tmp1), cex = .75)
shiny::runApp('RSApp/RoomSchema')
runApp('RSApp/RoomSchema')
runApp('RSApp/RoomSchema')
runApp('RSApp/RoomSchema')
runApp('RSApp/RoomSchema')
runApp('RSApp/RoomSchema')
runApp('RSApp/RoomSchema')
as.list(c(1:3))
list(c(1:3))
runApp('RSApp/RoomSchema')
runApp('RSApp/RoomSchema')
save.image("C:/Github/CONNECT/RoomSchema/RoomSchema.RData")
runApp('RSApp/RoomSchema')
ls()
runApp('RSApp/RoomSchema')
runApp('RSApp/RoomSchema')
runApp('RSApp/RoomSchema')
runApp('RSApp/RoomSchema')
runApp('RSApp/RoomSchema')
runApp('RSApp/RoomSchema')
runApp('RSApp/RoomSchema')
runApp('RSApp/RoomSchema')
save.image("C:/Github/CONNECT/RoomSchema/RoomSchema.RData")
load("C:/Github/CONNECT/RoomSchema/RoomSchema.RData")
shiny::runApp('RSApp/RoomSchema')
runApp('RSApp/RoomSchema')
runApp('RSApp/RoomSchema')
runApp('RSApp/RoomSchema')
runApp('RSApp/RoomSchema')
runApp('RSApp/RoomSchema')
runApp('RSApp/RoomSchema')
runApp('RSApp/RoomSchema')
runApp('RSApp/RoomSchema')
runApp('RSApp/RoomSchema')
runApp('RSApp/RoomSchema')
runApp('RSApp/RoomSchema')
runApp('RSApp/RoomSchema')
runApp('RSApp/RoomSchema')
runApp('RSApp/RoomSchema')
runApp('RSApp/RoomSchema')
runApp('RSApp/RoomSchema')
runApp('RSApp/RoomSchema')
runApp('RSApp/RoomSchema')
runApp('RSApp/RoomSchema')
heatmap(rwts)
image(rwts)
range(rwts)
image(rwts, zlim= c(-1,1))
blue2red <- c(hsv(.66,c(10:0)/10, .7), hsv(0, c(1:10)/10, .9))
image(rwts, zlim= c(-1,1), col = blue2red)
blue2red <- c(hsv(.66,c(10:0)/10, 1), hsv(0, c(1:10)/10, .9))
image(rwts, zlim= c(-1,1), col = blue2red)
image(rwts, zlim= c(-1,1), col = blue2red, xaxt = "n", yaxt = "n")
image(rwts, zlim= c(-1,1), col = blue2red, xaxt = "n", yaxt = "n", bty = "o")
image(rwts, zlim= c(-1,1), col = blue2red, xaxt = "n", yaxt = "n"); box()
mtext(side = 2, at = c(1:41)/41, adj = 1, line = 0, text = colnames(rwts)
)
image(rwts, zlim= c(-1,1), col = blue2red, xaxt = "n", yaxt = "n"); box()
mtext(side = 2, at = c(1:41)/41, adj = 1, line = 0, text = colnames(rwts), las = 2)
image(rwts, zlim= c(-1,1), col = blue2red, xaxt = "n", yaxt = "n"); box()
mtext(side = 2, at = c(0:40)/41, adj = 1, line = 0.1, text = colnames(rwts), las = 2)
mtext(side = 2, at = c(41:1)/40, adj = 1, line = 0.1, text = colnames(rwts), las = 2)
image(rwts[,41:1], zlim= c(-1,1), col = blue2red, xaxt = "n", yaxt = "n"); box()
mtext(side = 2, at = c(41:1)/41, adj = 1, line = 0.1, text = colnames(rwts), las = 2)
par(mar = c(0,4,4,0))
image(rwts[,41:1], zlim= c(-1,1), col = blue2red, xaxt = "n", yaxt = "n"); box()
par(mar = c(1,4,4,1))
image(rwts[,41:1], zlim= c(-1,1), col = blue2red, xaxt = "n", yaxt = "n"); box()
mtext(side = 2, at = c(41:1)/41, adj = 1, line = 0.1, text = colnames(rwts), las = 2)
par(mar = c(1,6,4,1))
image(rwts[,41:1], zlim= c(-1,1), col = blue2red, xaxt = "n", yaxt = "n"); box()
mtext(side = 2, at = c(41:1)/41, adj = 1, line = 0.1, text = colnames(rwts), las = 2)
mtext(side = 3, at = c(41:1)/41, adj = 1, line = 0.1, text = colnames(rwts), las = 2)
image(rwts[,41:1], zlim= c(-1,1), col = blue2red, xaxt = "n", yaxt = "n"); box()
mtext(side = 2, at = c(41:1)/41, adj = 1, line = 0.1, text = colnames(rwts), las = 2)
mtext(side = 3, at = c(41:1)/41, adj = 0, line = 0.1, text = colnames(rwts), las = 2)
image(rwts[,41:1], zlim= c(-1,1), col = blue2red, xaxt = "n", yaxt = "n"); box()
mtext(side = 2, at = c(40:0)/40, adj = 1, line = 0.1, text = colnames(rwts), las = 2)
mtext(side = 3, at = c(0:40)/40, adj = 0, line = 0.1, text = colnames(rwts), las = 2)
par(mar = c(1,6,6,1))
image(rwts[,41:1], zlim= c(-1,1), col = blue2red, xaxt = "n", yaxt = "n"); box()
mtext(side = 2, at = c(40:0)/40, adj = 1, line = 0.1, text = colnames(rwts), las = 2)
mtext(side = 3, at = c(0:40)/40, adj = 0, line = 0.1, text = colnames(rwts), las = 2)
plot.wts <- dget("plot_wts.r")
plot.wts <- dget("plot_wts.r")
plot.wts <- dget("plot_wts.r")
plot.wts(rwts)
plot.wts <- dget("plot_wts.r")
plot.wts(rwts)
plot.wts <- dget("plot_wts.r")
plot.wts(rwts)
plot.wts <- dget("plot_wts.r")
plot.wts(rwts)
plot.wts <- dget("plot_wts.r")
plot.wts(rwts)
plot.wts <- dget("plot_wts.r")
plot.wts(rwts)
runApp('RSApp/RoomSchema')
runApp('RSApp/RoomSchema')
runApp('RSApp/RoomSchema')
runApp('RSApp/RoomSchema')
runApp('RSApp/RoomSchema')
plot.wts <- dget("plot_wts.r")
plot.wts(rwts)
plot.wts <- dget("plot_wts.r")
plot.wts(rwts)
plot.wts <- dget("plot_wts.r")
plot.wts(rwts)
runApp('RSApp/RoomSchema')
runApp('RSApp/RoomSchema')
runApp('RSApp/RoomSchema')
runApp('RSApp/RoomSchema')
runApp('RSApp/RoomSchema')
runApp('RSApp/RoomSchema')
runApp('RSApp/RoomSchema')
runApp('RSApp/RoomSchema')
save.image("C:/Github/CONNECT/RoomSchema/RoomSchema.RData")
