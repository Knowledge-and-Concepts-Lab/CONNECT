setwd("C:/Github/CONNECT/RoomSchema/RSApp/RoomSchema")
ls()
shiny::runApp()
tmp <- read.csv("data/animal_vectors.csv", header = T, row.names = 1)
tmp[1:5, 1:5]
mean(tmp$monkey==tmp$beaver)
(1 - mean(tmp$monkey==tmp$beaver))/mean(tmp$monkey==tmp$beaver)
-log((1 - mean(tmp$monkey==tmp$beaver))/mean(tmp$monkey==tmp$beaver))
get.wts <- function(vmat){}
get.wts <- function(vmat){
nunits <- dim(vmat)[1]
o <- matrix(NA, nunits, nunits)
for(i in c(1:nunits)) for(j in c(1:nunits)){
if(i!=j){
psame <- mean(o[,i]==o[,j])
o[i,j] <- -log((1-psame)/psame)}}
o}
animal.vecs <- tmp
tmp <- get.wts(animal.vecs)
tmp[1:5,1:5]
get.wts
get.wts<-function(vmat){
nunits <- dim(vmat)[1]
o <- matrix(0, nunits, nunits)
for(i in c(1:nunits)) for(j in c(1:nunits)){
if(i!=j){ psame <- mean(vmat[,i]==vmat[,j])
o[i,j] <- -log((1-psame)/psame)}}
o}
tmp <- get.wts(animal.vecs)
tmp[1:5,1:5]
plot(tmp[lower.tri(tmp)])
runApp()
runApp()
shiny::runApp()
shiny::runApp()
load("C:/Github/CONNECT/RoomSchema/RSApp/RoomSchema/.RData")
ls()
tmp[1:5,1:5]
animal.vecs <- read.csv("data/animal_vectors.csv", header = T, row.names = 1)
tmp <- get.wts(animal.vecs)
tmp[1:5,1:5]
get.wts
-log(rowMeans(animal.vecs)/(1 - rowMeans(animal.vecs)))
tmp <- cbind(-log(rowMeans(animal.vecs)/(1 - rowMeans(animal.vecs))), tmp)
dim(tmp)
tmp[1:5,1:5]
get.wts()
get.wts
get.wts<-function(vmat){
nunits <- dim(vmat)[1]
o <- matrix(0, nunits, nunits)
for(i in c(1:nunits)) for(j in c(1:nunits)){
if(i!=j){ psame <- mean(vmat[,i]==vmat[,j])
o[i,j] <- -log((1-psame)/psame)}}
baseact <- rowMeans(vmat)
bias <- -log((1 - baseact)/baseact)
o <- cbind(bias, o)
colnames(o) <- c("bias", row.names(o))
o}
tmp <- get.wts(animal.vecs)
tmp[1:5,1:5]
write.csv(tmp, "data/animal_wts.csv", quote = F)
shiny::runApp()
runApp()
runApp()
animal.vecs <- read.csv("data/animal_vectors.csv", header = T, row.names = 1)
tmp <- get.wts(animal.vecs)
write.csv("data/animal_wts.csv", quote = F)
write.csv(tmp, "data/animal_wts.csv", quote = F)
runApp()
dim(tmp)
tmp1 <- rep(0, times = 48)
render.network(tmp1, tmp)
tmp1 <- matrix(0, 48, 20)
render.network(tmp, tmp1)
tmp <- rep(0, times = 48)
render.network(tmp, tmp1)
par(oma = c(2,2,2,2))
render.network(tmp, tmp1)
render.network(tmp, tmp1, mar = c(4,3,2,1))
par(mar = c(4,3,2,1))
render.network(tmp, tmp1, mar = c(4,3,2,1))
render.network(tmp, tmp1)
tmp <- get.wts(animal.vecs)
row.names(tmp1) <- row.names(tmp)
render.network(rep(0, times = 48), tmp1)
update.acts(rep(0, times = 48), tmp)
dim(tmp)
dim(tmp)
rep(0, times = 48) %*% tmp
dput(get.wts, "get_wts.r")
get.wts <- dget("get_wts.r")
tmp <- get.wts(animal.vecs)
tmp[1:5,1:5]
rep(0, times = 48) %*% tmp
get.wts
get.wts <- dget("get_wts.r")
tmp[1:5,1:5]
rep(0, times = 48) %*% tmp
tmp$has_scales
tmp[,"has_scales"]
sum(tmp)
tmp[1,]
dim(tmp)
tmp[48,]
row.names(tmp)[rowSums(tmp)==Inf]
tmp["has_a_tongue",]
tmp["has_a_tongue","eats_fish"]
sum(animal.vecs["has_a_tongue",]==animal.vecs["eats_fish"])
sum(animal.vecs["has_a_tongue",]==animal.vecs["eats_fish",])
mean(animal.vecs["has_a_tongue",]==animal.vecs["eats_fish",])
animal.vecs[1:5,1:5]
get.wts <- dget("get_wts.r")
tmp <- get.wts(animal.vecs)
dim(tmp)
tmp[1:5,1:5]
rep(0, times = 48) %*% tmp
write.csv(tmp, "data/animal_wts.csv")
runApp()
image(tmp)
image(animal.vecs)
image(as.matrix(animal.vecs))
animal.vecs[animal.vecs==0] <- -1
tmp <- get.wts(animal.vecs)
get.wts <- dget("get_wts.r")
tmp <- get.wts(animal.vecs)
image(tmp)
write.csv(tmp, "data/animal_wts.csv", quote = F)
runApp()
runApp()
runApp()
write.csv(tmp[1:40,1:40], "data/animal_wts.csv", quote = F)
runApp()
runApp()
runApp()
tmp[1:5,1:5]
dim(tmp)
tmp <- tmp[1:40,1:40]
rep(0, times = 40) %*% tmp
tmp <- as.matrix(read.csv("data/animal_wts.csv", header = T, row.names = 1))
dim(tmp)
rep(0, times = 40) %*% tmp
update.acts(rep(0, times = 40), tmp)
tmp <- get.wts(animal.vecs)
dim(tmp)
tmp <- tmp[1:40,1:41]
write.csv(tmp, "data/animal_wts.csv", quote = F)
runApp()
tmp[1:5,1:5]
runApp()
runApp()
runApp()
runApp()
animal.vecs["has_large_teeth",]
animal.vecs["has_large_teeth",] == animal.vecs["is_a_bird",]
mean(animal.vecs["has_large_teeth",] == animal.vecs["is_a_bird",])
runApp()
load("C:/Github/CONNECT/RoomSchema/RSApp/RoomSchema/.RData")
ls()
iac.activation
iac.activation(0, -10, rest = -1, minout = -1)
iac.activation(0, -1, rest = -1, minout = -1)
dim(tmp)
plot.wts(tmp)
plot.wts
range(tmp)
ls()
get.wts
get.wts <- dget("get_wts.r")
dim(animal.vecs)
animal.vecs[1:5,1:5]
animal.vecs[animal.vecs==0] <- -1
tmp <- get.wts(animal.vecs)
plot.wts(tmp)
anwts <- tmp
input <- rep(0, times = 50)
tmp <- update.acts(tmp, anwts)
dim(anwts)
update.acts
tmp <- update.acts(input, anwts)
render.network(tmp)
render.network(input, tmp)
input <- rep(-1, times = 50)
tmp <- update.acts(input, anwts)
render.network(input, tmp)
tmp[,20]
anwts$bias
anwts[,1]
anwts[1,]
anwts[,1]
tmp <- update.acts(input, anwts, dt = .05)
render.network(input, tmp)
plot.wts(anwts)
q()
