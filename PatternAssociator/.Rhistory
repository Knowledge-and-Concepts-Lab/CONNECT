plot.pa(m, inpats, outpats, rd = .2)
plot.pa <- dget("plot_pa.r")
plot.pa(m, inpats, outpats, rd = .2)
plot.pa <- dget("plot_pa.r")
plot.pa(m, inpats, outpats, rd = .2)
plot.pa <- dget("plot_pa.r")
plot.pa(m, inpats, outpats, rd = .2)
plot.pa <- dget("plot_pa.r")
plot.pa(m, inpats, outpats, rd = .2)
plot.pa <- dget("plot_pa.r")
plot.pa(m, inpats, outpats, rd = .2)
par(oma = c(2,2,2,2))
plot.pa(m, inpats, outpats, rd = .2)
plot.pa <- dget("plot_pa.r")
plot.pa(m, inpats, outpats, rd = .2)
plot.pa <- dget("plot_pa.r")
plot.pa(m, inpats, outpats, rd = .2)
plot.pa <- dget("plot_pa.r")
plot.pa(m, inpats, outpats, rd = .2)
plot.pa(m, inpats[1,], outpats[1,], rd = .2)
plot.pa <- dget("plot_pa.r")
plot.pa(m, inpats[1,], outpats[1,], rd = .2)
inpats[inpats==0] <- -1
plot.pa(m, inpats[1,], outpats[1,], rd = .2)
plot.pa <- dget("plot_pa.r")
plot.pa(m, inpats[1,], outpats[1,], rd = .2)
plot.pa <- dget("plot_pa.r")
plot.pa(m, inpats[1,], outpats[1,], rd = .2)
plot.pa <- dget("plot_pa.r")
plot.pa(m, inpats[1,], outpats[1,], rd = .2)
plot.pa <- dget("plot_pa.r")
plot.pa(m, inpats[1,], outpats[1,], rd = .2)
plot.pa <- dget("plot_pa.r")
plot.pa(m, inpats[1,], outpats[1,], rd = .2)
outpats[outpats ==0] <- -1
plot.pa(m, inpats[1,], outpats[1,], rd = .2)
plot.pa <- dget("plot_pa.r")
plot.pa(m, inpats[1,], outpats[1,], rd = .2)
plot.pa <- dget("plot_pa.r")
plot.pa(m, inpats[1,], outpats[1,], rd = .2)
max(abs(m))
plot.pa <- dget("plot_pa.r")
plot.pa(m, inpats[1,], outpats[1,], rd = .2)
dim(m)
m <- matrix(runif(80)-.5, 10, 8)
plot.pa(m, inpats[1,], outpats[1,], rd = .2)
m
plot.pa(m, inpats[1,], outpats[1,], rd = .2)
plot.pa <- dget("plot_pa.r")
plot.pa(m, inpats[1,], outpats[1,], rd = .2)
plot.pa(m, inpats[1,], inpats[1,] %*% m, rd = .2)
plot.pa <- dget("plot_pa.r")
plot.pa(m, inpats[1,], inpats[1,] %*% m, rd = .2)
plot.pa(m, inpats[2,], inpats[2,] %*% m, rd = .2)
plot.pa <- dget("plot_pa.r")
m[,] <- 0
plot.pa(m, inpats[2,], inpats[2,] %*% m, rd = .2)
plot.pa <- dget("plot_pa.r")
plot.pa(m, inpats[2,], inpats[2,] %*% m, rd = .2)
plot.pa <- dget("plot_pa.r")
plot.pa(m, inpats[2,], inpats[2,] %*% m, rd = .2)
dim(m)
dim(inpats)
dim(outpats)
tmp <- inpats %*% t(outpats)
dim(t(outpats))
inpats[,1] %*% t(outpats)
inpats[,1] %*% outpats
inpats[,1] %*% outpats[,1]
t(outpats) %*% inpats
outpats %*% t(inpats)
t(t(outpats) %*% inpats)
hebb.update <- dget("hebb_update.r")
hebb.update <- dget("hebb_update.r")
hebb.update(m, inpats, outpats)
hebb.update <- dget("hebb_update.r")
hebb.update(m, inpats, outpats)
m1 <- hebb.update(m, inpats, outpats)
plot.pa(m1, inpats[1,], outpats[,1])
plot.pa(m1, inpats[1,], inpats[,1] %*% m1)
plot.pa(m1, inpats[1,], inpats[,1] %*% m1 - outpats)
plot.pa(m1, inpats[1,], inpats[1,] %*% m1)
plot.pa <- dget("plot_pa.r")
plot.pa(m1, inpats[1,], outpats[1,])
plot.pa <- dget("plot_pa.r")
plot.pa(m1, inpats[1,], outpats[1,])
plot.pa(m1, inpats[2,], outpats[2,])
plot.pa(m1, inpats[3,], outpats[3,])
m2 <- hebb.update(m1, inpats, outpats)
plot.pa(m2, inpats[3,], outpats[3,])
plot.pa <- dget("plot_pa.r")
plot.pa(m2, inpats[3,], outpats[3,])
plot.pa <- dget("plot_pa.r")
plot.pa(m2, inpats[3,], outpats[3,])
plot.pa <- dget("plot_pa.r")
plot.pa(m2, inpats[3,], outpats[3,])
plot.pa <- dget("plot_pa.r")
plot.pa(m2, inpats[3,], outpats[3,])
plot.pa <- dget("plot_pa.r")
plot.pa(m2, inpats[3,], outpats[3,])
plot.pa <- dget("plot_pa.r")
plot.pa(m2, inpats[3,], outpats[3,])
plot.pa <- dget("plot_pa.r")
plot.pa(m2, inpats[3,], outpats[3,])
plot.pa(m0, inpats[3,], outpats[3,])
plot.pa(m, inpats[3,], outpats[3,])
plot.pa(m1, inpats[3,], outpats[3,])
plot.pa(m2, inpats[3,], outpats[3,])
m1 <- hebb.update(m, inpats[1,], outpats[1,])
m1 <- hebb.update(m, inpats[1:2,], outpats[1:2,])
plot.pa(m1, inpats[3,], outpats[3,])
dim(inpats[1,])
dim(inpats[1,:])
dim(inpats[1,1:8])
dim(inpats[1:2,])
is.matrix(inpats[1,])
as.matrix(inpats[1,])
dim(as.matrix(inpats[1,]))
is.numeric(m)
is.vector(inpats)
plot.pa <- dget("plot_pa.r")
hebb.update <- dget("hebb_update.r")
m1 <- hebb.update(m, inpats[1,], outpats[,1])
tmp <- as.matrix(inpats[1,])
dim(tmp)()
dim(tmp)
tmp <- t(as.matrix(inpats[1,]))
tmp1 <- t(as.matrix(outpats[1,]))
dim(tmp1)
hebb.update <- dget("hebb_update.r")
m1 <- hebb.update(m, inpats[1,], outpats[,1])
tmp <- matrix(inpats[1,], 1, length(inpats[1,]))
dim(tmp)
tmp1 <- matrix(outpats[1,], 1, length(outpats[1,]))
dim(tmp1)
dim(t(tmp1))
t(tmp1)%*% tmp
hebb
hebb.update()
hebb.update
hebb.update(m, inpats[1,], outpats[,1])
dim(m)
hebb.update
hebb.update <- dget("hebb_update.r")
hebb.update(m, inpats[1,], outpats[,1])
hebb.update <- dget("hebb_update.r")
hebb.update(m, inpats[1,], outpats[,1])
tmp <- inpats[1,]
tmp1 <- outpats[1,]
t(tmp1)
tmp1
tmp <- matrix(tmp, 1, length(tmp))
tmp1 <- matrix(tmp1, 1, length(tmp1))
t(tmp1) %*% tmp
hebb.update <- dget("hebb_update.r")
hebb.update(m, inpats[1,], outpats[,1])
hebb.update(m, inpats[1,], outpats[1,])
hebb.update <- dget("hebb_update.r")
hebb.update(m, inpats[1,], outpats[1,])
m1 <- hebb.update(m, inpats[1,], outpats[1,])
plot.pa(m1, inpat = [1,], outpats[1,])
plot.pa(m1, inpats = [1,], outpats[1,])
plot.pa(m1, inpats[1,], outpats[1,])
dim(m)
dim(m10
)
dim(m1)
plot.pa
plot.pa(m1, inpat = inpats[1,], outpat = outpats[1,])
plot.pa(m, inpat = inpats[1,], outpat = outpats[1,])
plot.pa(m2, inpats[3,], outpats[3,])
tmp
tmp <- inpats[1,]
tmp
tmp %*% m
plot.pa(m2, tmp, outpats[1,])
plot.pa <- dget("plot_pa.r")
plot.pa(m2, inpats[1,], outpats[,1])
plot.pa(m1, inpats[1,], outpats[,1])
m1 <- hebb.update(m, inpats[1,], outpats[,1])
m1 <- hebb.update(m, inpats[1,], outpats[1,])
plot.pa(m1, inpats[1,], outpats[,1])
outpats[1,]
plot.pa <- dget("plot_pa.r")
plot.pa(m1, inpats[1,], outpats[,1])
inpats[1,] %*% m1
plot.pa(m1, inpats[1,], outpats[1,])
m1 <- hebb.update(m, inpats[1,], outpats[1,], lr = .1)
plot.pa(m1, inpats[1,], outpats[1,])
ms <- list(m, m1)
for(i in c(2:10)) m2[[i]] <- hebb.update(ms[[i-1]], inpats[i,], outpats[i,])
for(i in c(2:10)) ms[[i]] <- hebb.update(ms[[i-1]], inpats[i,], outpats[i,])
plot.pa(ms[[2]], inpats[2,], outpats[2,])
plot.pa(ms[[3]], inpats[3,], outpats[3,])
plot.pa(ms[[3]], inpats[1,], outpats[1,])
ms[[1]] <- m
for(i in c(1:10)) ms[[i+1]] <- hebb.update(ms[[i]], inpats[i,], outpats[i,])
for(i in c(1:10)) ms[[i+1]] <- hebb.update(ms[[i]], inpats[i,], outpats[i,], lr = .1)
plot.pa(ms[[1]], inpats[1,], outpats[1,])
for(i in c(2:11)){plot.pa(ms[[i]], inpats[i-1,], outpats[i-1,]); readline()}
save.image("C:/Github/CONNECT/PatternAssociator/RPatternAssociator.RData")
#Read input and output patterns
#Read CSV file into temporary object:
tmp <- read.csv("patterns1.csv", header = T, row.names = 1)
#Pull out input patterns as a matrix:
inputs <- as.matrix(tmp[,grep("in", names(tmp))])
#Pull out output patterns as a matrix:
targets <- as.matrix(tmp[,grep("out", names(tmp))])
#Get rid of temporary object:
rm(tmp)
ls()
rm(inpats, outpats)
head(inputs)
head(targets)
#Load required libraries
library(plotrix) #Adds plotting functions including ability to draw a circle easily
#Read in pre-built functions
plot.pa <- dget("plot_pa.r") #Function to plot pattern associator
hebb.update <- dget("hebb_update.r") #Function to update weights via Hebb rule.
#Read input and output patterns
#Read CSV file into temporary object:
tmp <- read.csv("patterns1.csv", header = T, row.names = 1)
#Pull out input patterns as a matrix:
inputs <- as.matrix(tmp[,grep("in", names(tmp))])
#Pull out output patterns as a matrix:
targets <- as.matrix(tmp[,grep("out", names(tmp))])
#Get rid of temporary object:
rm(tmp)
row.names(matrix(0,10,8))
is.null(row.names(matrix(0,10,8)))
make.pa <- dget("make_pa.r")
m <- make.pa(inputs, targets)
make.pa <- dget("make_pa.r")
m <- make.pa(inputs, targets)
m
m <- make.pa(inputs, targets, init = 5)
m
plot.pa(m, inputs[1,], targets[1,])
m <- make.pa(inputs, targets)
plot.pa(m, inputs[1,], targets[1,])
m1 <- hebb.update(m, inputs, targets)
plot.pa(m1, inputs[1,], targets[1,])
m1 <- hebb.update(m, inputs, targets, lr = .1)
plot.pa(m1, inputs[1,], targets[1,])
delta.updater <- dget("delta_update.r")
m1 <- delta.updater(m, inputs, targets, lr = .1)
plot.pa(m1, inputs[1,], targets[1,])
m1
plot.pa(m1, inputs[1,], targets[1,])
m1 <- delta.updater(m1, inputs, targets, lr = .1)
m1 <- delta.updater(m1, inputs, targets, lr = .1)
m1 <- delta.updater(m1, inputs, targets, lr = .1)
m1 <- delta.updater(m1, inputs, targets, lr = .1)
m1 <- delta.updater(m1, inputs, targets, lr = .1)
plot.pa(m1, inputs[1,], targets[1,])
m1 <- delta.updater(m, inputs, targets, lr = .1)
plot.pa(m1, inputs[1,], targets[1,])
m1 <- delta.updater(m, inputs, targets, lr = .01)
plot.pa(m1, inputs[1,], targets[1,])
m1 <- delta.updater(m1, inputs, targets, lr = .01)
m1 <- delta.updater(m1, inputs, targets, lr = .01)
m1 <- delta.updater(m1, inputs, targets, lr = .01)
m1 <- delta.updater(m1, inputs, targets, lr = .01)
m1 <- delta.updater(m1, inputs, targets, lr = .01)
m1 <- delta.updater(m1, inputs, targets, lr = .01)
m1 <- delta.updater(m1, inputs, targets, lr = .01)
plot.pa(m1, inputs[1,], targets[1,])
m1 <- delta.updater(m1, inputs, targets, lr = .01)
m1 <- delta.updater(m1, inputs, targets, lr = .01)
m1 <- delta.updater(m1, inputs, targets, lr = .01)
m1 <- delta.updater(m1, inputs, targets, lr = .01)
m1 <- delta.updater(m1, inputs, targets, lr = .01)
m1 <- delta.updater(m1, inputs, targets, lr = .01)
plot.pa(m1, inputs[1,], targets[1,])
for(i in c(1:1000)) m1 <- delta.updater(m1, inputs, targets, lr = .01)
plot.pa(m1, inputs[1,], targets[1,])
plot.pa(m1, inputs[2,], targets[2,])
plot.pa(m1, inputs[3,], targets[3,])
plot.pa(m1, inputs[7,], targets[7,])
save.image("C:/Github/CONNECT/PatternAssociator/RPatternAssociator.RData")
plot.pa <- dget("plot_pa.r")
plot.pa(m1, inputs[7,], targets[7,])
plot.pa <- dget("plot_pa.r")
plot.pa(m1, inputs[7,], targets[7,])
colnames(m)
plot.pa(m1, inputs[7,], targets[7,])
plot.pa(m1, inputs[10,], targets[10,])
plot.pa(m, inputs[10,], targets[10,])
plot.pa(m1, inputs[10,], targets[10,])
plot.pa <- dget("plot_pa.r")
plot.pa(m1, inputs[10,], targets[10,])
inputs[10,]
outputs[1,]
targets[1,]
targets[10,]
plot.pa <- dget("plot_pa.r")
plot.pa(m1, inputs[10,], targets[10,])
colnames(m1)
plot.pa <- dget("plot_pa.r")
plot.pa(m1, inputs[10,], targets[10,])
plot.pa <- dget("plot_pa.r")
plot.pa(m1, inputs[10,], targets[10,])
plot.pa <- dget("plot_pa.r")
plot.pa(m1, inputs[10,], targets[10,])
plot.pa <- dget("plot_pa.r")
plot.pa(m1, inputs[10,], targets[10,])
plot.pa <- dget("plot_pa.r")
plot.pa(m1, inputs[10,], targets[10,])
plot.pa <- dget("plot_pa.r")
plot.pa(m1, inputs[10,], targets[10,])
?par
plot.pa <- dget("plot_pa.r")
plot.pa(m1, inputs[10,], targets[10,])
plot.pa <- dget("plot_pa.r")
plot.pa(m1, inputs[10,], targets[10,])
plot.pa <- dget("plot_pa.r")
plot.pa(m1, inputs[10,], targets[10,])
ls()
#Load required libraries
library(plotrix) #Adds plotting functions including ability to draw a circle easily
#Read in pre-built functions
make.pa <- dget("make_pa.r") #Function to create and initialize model
plot.pa <- dget("plot_pa.r") #Function to plot pattern associator
hebb.update <- dget("hebb_update.r") #Function to update weights via Hebb rule.
delta.update <- dget("delta_update.r") #Function to update weights via delta rule.
#Read input and output patterns
#Read CSV file into temporary object:
tmp <- read.csv("patterns1.csv", header = T, row.names = 1)
#Pull out input patterns as a matrix:
inputs <- as.matrix(tmp[,grep("in", names(tmp))])
#Pull out output patterns as a matrix:
targets <- as.matrix(tmp[,grep("out", names(tmp))])
#Get rid of temporary object:
rm(tmp)
m <- make.link(inputs,targets) #Create model
m <- make.pa(inputs,targets) #Create model
m
plot.pa(m, inputs, targets)
plot.pa(m, inputs[1,], targets[1,])
#Load required libraries
library(plotrix) #Adds plotting functions including ability to draw a circle easily
#Read in pre-built functions
make.pa <- dget("make_pa.r") #Function to create and initialize model
plot.pa <- dget("plot_pa.r") #Function to plot pattern associator
hebb.update <- dget("hebb_update.r") #Function to update weights via Hebb rule.
delta.update <- dget("delta_update.r") #Function to update weights via delta rule.
#Read input and output patterns
#Read CSV file into temporary object:
tmp <- read.csv("patterns1.csv", header = T, row.names = 1)
#Pull out input patterns as a matrix:
inputs <- as.matrix(tmp[,grep("in", names(tmp))])
#Pull out output patterns as a matrix:
targets <- as.matrix(tmp[,grep("out", names(tmp))])
#Get rid of temporary object:
rm(tmp)
plot.pa(m, inputs[1,], targets[1,])
mean(m^2)
plot.pa <- dget("plot_pa.r") #Function to plot pattern associator
plot.pa(m, inputs[1,], targets[1,])
m1 <- delta.update(m, inputs, targets)
delta.update <- dget("delta_update.r")
m1 <- delta.update(m, inputs, targets)
m1 <- delta.update(m, inputs, targets)
m1 <- delta.update(m1, inputs, targets)
m1 <- delta.update(m1, inputs, targets)
m1 <- delta.update(m1, inputs, targets)
m1 <- delta.update(m, inputs, targets, lr = 0.01)
m1 <- delta.update(m1, inputs, targets, lr = 0.01)
m1 <- delta.update(m1, inputs, targets, lr = 0.01)
m1 <- delta.update(m1, inputs, targets, lr = 0.01)
m1 <- delta.update(m1, inputs, targets, lr = 0.01)
m1 <- delta.update(m1, inputs, targets, lr = 0.01)
m1 <- delta.update(m1, inputs, targets, lr = 0.01)
m1 <- delta.update(m1, inputs, targets, lr = 0.01)
for(i in c(1:100)) m1 <- delta.update(m1, inputs, targets, lr = 0.01)
m1 <- hebb.update(m, inputs, targets, lr = 0.01)
plot.pa(m1, inputs, targets)
plot.pa(m1, inputs[1,], targets[1,])
plot.pa <- dget("plot_pa.r") #Function to plot pattern associator
plot.pa(m1, inputs[1,], targets[1,])
plot.pa <- dget("plot_pa.r") #Function to plot pattern associator
plot.pa(m1, inputs[1,], targets[1,])
plot.pa <- dget("plot_pa.r") #Function to plot pattern associator
plot.pa(m1, inputs[1,], targets[1,])
plot.pa(m, inputs[1,], targets[1,])
for(i in c(1:10)){}
for(i in c(1:10)){
}
m1 <- m
for(i in c(1:10)){
m1 <- hebb.update(m1, inputs[i,], targets[i,])
plot.pa(m1, inputs[i,], targets[i,])
readline()}
save.image("C:/Github/CONNECT/PatternAssociator/RPatternAssociator.RData")
shiny::runApp('shiny/PatternAssociator')
write.csv(inputs, './shiny/PatternAssociator/data/inputs.csv', quote = F, row.names = T)
write.csv(targets, './shiny/PatternAssociator/data/targets.csv', quote = F, row.names = T)
runApp('shiny/PatternAssociator')
runApp('shiny/PatternAssociator')
runApp('shiny/PatternAssociator')
runApp('shiny/PatternAssociator')
runApp('shiny/PatternAssociator')
runApp('shiny/PatternAssociator')
runApp('shiny/PatternAssociator')
runApp('shiny/PatternAssociator')
runApp('shiny/PatternAssociator')
runApp('shiny/PatternAssociator')
runApp('shiny/PatternAssociator')
runApp('shiny/PatternAssociator')
runApp('shiny/PatternAssociator')
runApp('shiny/PatternAssociator')
runApp('shiny/PatternAssociator')
runApp('shiny/PatternAssociator')
runApp('shiny/PatternAssociator')
runApp('shiny/PatternAssociator')
runApp('shiny/PatternAssociator')
runApp('shiny/PatternAssociator')
runApp('shiny/PatternAssociator')
runApp('shiny/PatternAssociator')
runApp('shiny/PatternAssociator')
runApp('shiny/PatternAssociator')
runApp('shiny/PatternAssociator')
runApp('shiny/PatternAssociator')
runApp('shiny/PatternAssociator')
runApp('shiny/PatternAssociator')
runApp('shiny/PatternAssociator')
runApp('shiny/PatternAssociator')
runApp('shiny/PatternAssociator')
runApp('shiny/PatternAssociator')
runApp('shiny/PatternAssociator')
runApp('shiny/PatternAssociator')
runApp('shiny/PatternAssociator')
runApp('shiny/PatternAssociator')
runApp('shiny/PatternAssociator')
runApp('shiny/PatternAssociator')
runApp('shiny/PatternAssociator')
runApp('shiny/PatternAssociator')
runApp('shiny/PatternAssociator')
runApp('shiny/PatternAssociator')
runApp('shiny/PatternAssociator')
runApp('shiny/PatternAssociator')
runApp('shiny/PatternAssociator')
runApp('shiny/PatternAssociator')
runApp('shiny/PatternAssociator')
runApp('shiny/PatternAssociator')
runApp('shiny/PatternAssociator')
runApp('shiny/PatternAssociator')
runApp('shiny/PatternAssociator')
runApp('shiny/PatternAssociator')
runApp('shiny/PatternAssociator')
runApp('shiny/PatternAssociator')
runApp('shiny/PatternAssociator')
runApp('shiny/PatternAssociator')
runApp('shiny/PatternAssociator')
runApp('shiny/PatternAssociator')
numpats
floor(10 * .5)
sample(c(1:10), 5)
inputs[sample(c(1:10), 5),]
is,matrix(inputs[sample(c(1:10), 5),])
is.matrix(inputs[sample(c(1:10), 5),])
save.image("C:/Github/CONNECT/PatternAssociator/RPatternAssociator.RData")
ls()
hebb.update(m, sample(c(1:10, 5),])
s <- sample(c(1:10), 5)
hebb.update(m, inputs[s,], outputs[s,])
hebb.update(m, inputs[s,], targets[s,])
runApp('shiny/PatternAssociator')
runApp('shiny/PatternAssociator')
runApp('shiny/PatternAssociator')
runApp('shiny/PatternAssociator')
runApp('shiny/PatternAssociator')
runApp('shiny/PatternAssociator')
runApp('shiny/PatternAssociator')
runApp('shiny/PatternAssociator')
runApp('shiny/PatternAssociator')
runApp('shiny/PatternAssociator')
runApp('shiny/PatternAssociator')
runApp('shiny/PatternAssociator')
runApp('shiny/PatternAssociator')
runApp('shiny/PatternAssociator')
runApp('shiny/PatternAssociator')
runApp('shiny/PatternAssociator')
runApp('shiny/PatternAssociator')
save.image("C:/Github/CONNECT/PatternAssociator/RPatternAssociator.RData")
load("C:/Github/CONNECT/PatternAssociator/RPatternAssociator.RData")
shiny::runApp('shiny/PatternAssociator')
runApp('shiny/PatternAssociator')
runApp('shiny/PatternAssociator')
runApp('shiny/PatternAssociator')
runApp('shiny/PatternAssociator')
runApp('shiny/PatternAssociator')
runApp('shiny/PatternAssociator')
runApp('shiny/PatternAssociator')
tmp <- numeric()
append(tmp, c(1:10))
tmp <- append(tmp, c(1:10))
tmp <- append(tmp, c(1:10))
tmp
length(numeric())
runApp('shiny/PatternAssociator')
runApp('shiny/PatternAssociator')
runApp('shiny/PatternAssociator')
runApp('shiny/PatternAssociator')
runApp('shiny/PatternAssociator')
runApp('shiny/PatternAssociator')
runApp('shiny/PatternAssociator')
runApp('shiny/PatternAssociator')
runApp('shiny/PatternAssociator')
runApp('shiny/PatternAssociator')
runApp('shiny/PatternAssociator')
save.image("C:/Github/CONNECT/PatternAssociator/RPatternAssociator.RData")
